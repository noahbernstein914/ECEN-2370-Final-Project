
NBernsteinLabFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c0c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ca8  08005db8  08005db8  00006db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a60  08007a60  00009024  2**0
                  CONTENTS
  4 .ARM          00000008  08007a60  08007a60  00008a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a68  08007a68  00009024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a68  08007a68  00008a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a6c  08007a6c  00008a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08007a70  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009024  2**0
                  CONTENTS
 10 .bss          000259bc  20000024  20000024  00009024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200259e0  200259e0  00009024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef05  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f0f  00000000  00000000  00017f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  0001ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b7e  00000000  00000000  0001bda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002707e  00000000  00000000  0001c926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ce8  00000000  00000000  000439a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1b7c  00000000  00000000  0005768c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00139208  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d30  00000000  00000000  0013924c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0013cf7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005da0 	.word	0x08005da0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08005da0 	.word	0x08005da0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 fac6 	bl	8002a70 <initialise_monitor_handles>
	LTCD__Init();
 80004e4:	f000 fd26 	bl	8000f34 <LTCD__Init>
	LTCD_Layer_Init(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f000 fce3 	bl	8000eb4 <LTCD_Layer_Init>
	LCD_Clear(0, LCD_COLOR_WHITE);
 80004ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fe38 	bl	8001168 <LCD_Clear>
	InitializeLCDTouch();
 80004f8:	f000 ff0e 	bl	8001318 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80004fc:	4b03      	ldr	r3, [pc, #12]	@ (800050c <ApplicationInit+0x30>)
 80004fe:	2201      	movs	r2, #1
 8000500:	719a      	strb	r2, [r3, #6]
    initializeButtonInteruptMode();
 8000502:	f000 f805 	bl	8000510 <initializeButtonInteruptMode>
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000040 	.word	0x20000040

08000510 <initializeButtonInteruptMode>:
void initializeButtonInteruptMode()
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
    BUTTON_Init_InterruptMode();
 8000514:	f000 f92e 	bl	8000774 <BUTTON_Init_InterruptMode>
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8000520:	2006      	movs	r0, #6
 8000522:	f002 fca8 	bl	8002e76 <HAL_NVIC_DisableIRQ>

    // Clear the interrupt pending bit
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8000526:	4b05      	ldr	r3, [pc, #20]	@ (800053c <EXTI0_IRQHandler+0x20>)
 8000528:	2201      	movs	r2, #1
 800052a:	615a      	str	r2, [r3, #20]

    // Add an event to indicate the button was pressed.
    addSchedulerEvent(BUTTON_TOGGLE_EVENT);
 800052c:	2004      	movs	r0, #4
 800052e:	f000 ff0b 	bl	8001348 <addSchedulerEvent>

    // Re-enable IRQ
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000532:	2006      	movs	r0, #6
 8000534:	f002 fc91 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40013c00 	.word	0x40013c00

08000540 <boardInit>:
 *      Author: noahbernstein
 */
#include "Board.h"

Board boardInit()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b0b8      	sub	sp, #224	@ 0xe0
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
    Board newBoard;
    newBoard.gameOver = false;
 8000548:	2300      	movs	r3, #0
 800054a:	723b      	strb	r3, [r7, #8]
    newBoard.startTime = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
    for (int y = 0; y < BOARD_HEIGHT; y++)
 8000550:	2300      	movs	r3, #0
 8000552:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000556:	e01f      	b.n	8000598 <boardInit+0x58>
    {
        for (int x = 0; x < BOARD_WIDTH; x++)
 8000558:	2300      	movs	r3, #0
 800055a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800055e:	e012      	b.n	8000586 <boardInit+0x46>
        {
            newBoard.gameBoard[y][x] = 'b'; // b for blank
 8000560:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000564:	4613      	mov	r3, r2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	4413      	add	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	33e0      	adds	r3, #224	@ 0xe0
 800056e:	19da      	adds	r2, r3, r7
 8000570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000574:	4413      	add	r3, r2
 8000576:	3bd0      	subs	r3, #208	@ 0xd0
 8000578:	2262      	movs	r2, #98	@ 0x62
 800057a:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < BOARD_WIDTH; x++)
 800057c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000580:	3301      	adds	r3, #1
 8000582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800058a:	2b09      	cmp	r3, #9
 800058c:	dde8      	ble.n	8000560 <boardInit+0x20>
    for (int y = 0; y < BOARD_HEIGHT; y++)
 800058e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000592:	3301      	adds	r3, #1
 8000594:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800059c:	2b13      	cmp	r3, #19
 800059e:	dddb      	ble.n	8000558 <boardInit+0x18>
        }
    }
    return newBoard;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	22d0      	movs	r2, #208	@ 0xd0
 80005aa:	4619      	mov	r1, r3
 80005ac:	f005 fbea 	bl	8005d84 <memcpy>
}
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	37e0      	adds	r7, #224	@ 0xe0
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <getColorFromChar>:

uint16_t getColorFromChar(char c)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
    switch (c)
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	3b62      	subs	r3, #98	@ 0x62
 80005c6:	2b18      	cmp	r3, #24
 80005c8:	d84b      	bhi.n	8000662 <getColorFromChar+0xaa>
 80005ca:	a201      	add	r2, pc, #4	@ (adr r2, 80005d0 <getColorFromChar+0x18>)
 80005cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d0:	0800065d 	.word	0x0800065d
 80005d4:	08000663 	.word	0x08000663
 80005d8:	08000663 	.word	0x08000663
 80005dc:	08000663 	.word	0x08000663
 80005e0:	08000663 	.word	0x08000663
 80005e4:	08000663 	.word	0x08000663
 80005e8:	08000663 	.word	0x08000663
 80005ec:	08000635 	.word	0x08000635
 80005f0:	08000653 	.word	0x08000653
 80005f4:	08000663 	.word	0x08000663
 80005f8:	08000657 	.word	0x08000657
 80005fc:	08000663 	.word	0x08000663
 8000600:	08000663 	.word	0x08000663
 8000604:	0800063b 	.word	0x0800063b
 8000608:	08000663 	.word	0x08000663
 800060c:	08000663 	.word	0x08000663
 8000610:	08000663 	.word	0x08000663
 8000614:	08000647 	.word	0x08000647
 8000618:	08000641 	.word	0x08000641
 800061c:	08000663 	.word	0x08000663
 8000620:	08000663 	.word	0x08000663
 8000624:	08000663 	.word	0x08000663
 8000628:	08000663 	.word	0x08000663
 800062c:	08000663 	.word	0x08000663
 8000630:	0800064d 	.word	0x0800064d
    {
    case 'i':
        return I_BLOCK_COLOR;
 8000634:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000638:	e015      	b.n	8000666 <getColorFromChar+0xae>
    case 'o':
        return O_BLOCK_COLOR;
 800063a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800063e:	e012      	b.n	8000666 <getColorFromChar+0xae>
    case 't':
        return T_BLOCK_COLOR;
 8000640:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000644:	e00f      	b.n	8000666 <getColorFromChar+0xae>
    case 's':
        return S_BLOCK_COLOR;
 8000646:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800064a:	e00c      	b.n	8000666 <getColorFromChar+0xae>
    case 'z':
        return Z_BLOCK_COLOR;
 800064c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000650:	e009      	b.n	8000666 <getColorFromChar+0xae>
    case 'j':
        return J_BLOCK_COLOR;
 8000652:	231f      	movs	r3, #31
 8000654:	e007      	b.n	8000666 <getColorFromChar+0xae>
    case 'l':
        return L_BLOCK_COLOR;
 8000656:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800065a:	e004      	b.n	8000666 <getColorFromChar+0xae>
    case 'b':
        return BLANK_BLOCK_COLOR;
 800065c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000660:	e001      	b.n	8000666 <getColorFromChar+0xae>
    default:
        return 0x1224; 
 8000662:	f241 2324 	movw	r3, #4644	@ 0x1224
    }
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <drawBoard>:

void drawBoard(Board *board)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af02      	add	r7, sp, #8
 800067a:	6078      	str	r0, [r7, #4]
    for (int y = 0; y < BOARD_HEIGHT; y++)
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
 8000680:	e035      	b.n	80006ee <drawBoard+0x7a>
    {
        for (int x = 0; x < BOARD_WIDTH; x++)
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
 8000686:	e02c      	b.n	80006e2 <drawBoard+0x6e>
        {
            char cell = board->gameBoard[y][x];
 8000688:	6879      	ldr	r1, [r7, #4]
 800068a:	69fa      	ldr	r2, [r7, #28]
 800068c:	4613      	mov	r3, r2
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4413      	add	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	18ca      	adds	r2, r1, r3
 8000696:	69bb      	ldr	r3, [r7, #24]
 8000698:	4413      	add	r3, r2
 800069a:	3308      	adds	r3, #8
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	74fb      	strb	r3, [r7, #19]
            uint16_t drawX = X_START + x * CELL_WIDTH;
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	461a      	mov	r2, r3
 80006a6:	0112      	lsls	r2, r2, #4
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	332d      	adds	r3, #45	@ 0x2d
 80006ae:	823b      	strh	r3, [r7, #16]
            uint16_t drawY = Y_START + y * CELL_HEIGHT;
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	461a      	mov	r2, r3
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	330a      	adds	r3, #10
 80006be:	81fb      	strh	r3, [r7, #14]
            uint16_t color = getColorFromChar(cell);
 80006c0:	7cfb      	ldrb	r3, [r7, #19]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ff78 	bl	80005b8 <getColorFromChar>
 80006c8:	4603      	mov	r3, r0
 80006ca:	81bb      	strh	r3, [r7, #12]
            LCD_Draw_Filled_Rectangle(drawX, drawY, CELL_WIDTH, CELL_HEIGHT, color);
 80006cc:	89f9      	ldrh	r1, [r7, #14]
 80006ce:	8a38      	ldrh	r0, [r7, #16]
 80006d0:	89bb      	ldrh	r3, [r7, #12]
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	230f      	movs	r3, #15
 80006d6:	220f      	movs	r2, #15
 80006d8:	f000 fca8 	bl	800102c <LCD_Draw_Filled_Rectangle>
        for (int x = 0; x < BOARD_WIDTH; x++)
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	3301      	adds	r3, #1
 80006e0:	61bb      	str	r3, [r7, #24]
 80006e2:	69bb      	ldr	r3, [r7, #24]
 80006e4:	2b09      	cmp	r3, #9
 80006e6:	ddcf      	ble.n	8000688 <drawBoard+0x14>
    for (int y = 0; y < BOARD_HEIGHT; y++)
 80006e8:	69fb      	ldr	r3, [r7, #28]
 80006ea:	3301      	adds	r3, #1
 80006ec:	61fb      	str	r3, [r7, #28]
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	2b13      	cmp	r3, #19
 80006f2:	ddc6      	ble.n	8000682 <drawBoard+0xe>
        }
    }

    for (uint16_t lineX = X_START; lineX <= X_START + GRID_WIDTH; lineX += CELL_WIDTH)
 80006f4:	232d      	movs	r3, #45	@ 0x2d
 80006f6:	82fb      	strh	r3, [r7, #22]
 80006f8:	e009      	b.n	800070e <drawBoard+0x9a>
    {
        LCD_Draw_Vertical_Line(lineX, Y_START, GRID_HEIGHT, LCD_COLOR_BLACK);
 80006fa:	8af8      	ldrh	r0, [r7, #22]
 80006fc:	2300      	movs	r3, #0
 80006fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000702:	210a      	movs	r1, #10
 8000704:	f000 fce2 	bl	80010cc <LCD_Draw_Vertical_Line>
    for (uint16_t lineX = X_START; lineX <= X_START + GRID_WIDTH; lineX += CELL_WIDTH)
 8000708:	8afb      	ldrh	r3, [r7, #22]
 800070a:	330f      	adds	r3, #15
 800070c:	82fb      	strh	r3, [r7, #22]
 800070e:	8afb      	ldrh	r3, [r7, #22]
 8000710:	2bc3      	cmp	r3, #195	@ 0xc3
 8000712:	d9f2      	bls.n	80006fa <drawBoard+0x86>
    }
    for (uint16_t lineY = Y_START; lineY <= Y_START + GRID_HEIGHT; lineY += CELL_HEIGHT)
 8000714:	230a      	movs	r3, #10
 8000716:	82bb      	strh	r3, [r7, #20]
 8000718:	e008      	b.n	800072c <drawBoard+0xb8>
    {
        LCD_Draw_Horizontal_Line(X_START, lineY, GRID_WIDTH, LCD_COLOR_BLACK);
 800071a:	8ab9      	ldrh	r1, [r7, #20]
 800071c:	2300      	movs	r3, #0
 800071e:	2296      	movs	r2, #150	@ 0x96
 8000720:	202d      	movs	r0, #45	@ 0x2d
 8000722:	f000 fcfa 	bl	800111a <LCD_Draw_Horizontal_Line>
    for (uint16_t lineY = Y_START; lineY <= Y_START + GRID_HEIGHT; lineY += CELL_HEIGHT)
 8000726:	8abb      	ldrh	r3, [r7, #20]
 8000728:	330f      	adds	r3, #15
 800072a:	82bb      	strh	r3, [r7, #20]
 800072c:	8abb      	ldrh	r3, [r7, #20]
 800072e:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8000732:	d9f2      	bls.n	800071a <drawBoard+0xa6>
    }
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <BUTTON_Enable_Clock>:
#include <stdbool.h>
#include "stm32f4xx_hal.h"


void BUTTON_Enable_Clock()
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <BUTTON_Enable_Clock+0x30>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <BUTTON_Enable_Clock+0x30>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <BUTTON_Enable_Clock+0x30>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <BUTTON_Init_InterruptMode>:
        return 0;
    }
}

void BUTTON_Init_InterruptMode()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef pinConfig = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
    pinConfig.Pin = GPIO_PIN_0;
 8000788:	2301      	movs	r3, #1
 800078a:	607b      	str	r3, [r7, #4]
    pinConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 800078c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000790:	60bb      	str	r3, [r7, #8]
    pinConfig.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
    pinConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 8000796:	2302      	movs	r3, #2
 8000798:	613b      	str	r3, [r7, #16]
    BUTTON_Enable_Clock();
 800079a:	f7ff ffd1 	bl	8000740 <BUTTON_Enable_Clock>
    HAL_GPIO_Init(GPIOA, &pinConfig);
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	4619      	mov	r1, r3
 80007a2:	4805      	ldr	r0, [pc, #20]	@ (80007b8 <BUTTON_Init_InterruptMode+0x44>)
 80007a4:	f002 fb82 	bl	8002eac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007a8:	2006      	movs	r0, #6
 80007aa:	f002 fb56 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40020000 	.word	0x40020000

080007bc <gameLoop>:

#include "GameDriver.h"

void gameLoop(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80007c2:	af02      	add	r7, sp, #8
    bool run = false;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    titleScreen();
 80007ca:	f000 f9f5 	bl	8000bb8 <titleScreen>

    uint32_t displayNum = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200

    STMPE811_TouchData touchData; 

    while (!run)
 80007d4:	e042      	b.n	800085c <gameLoop+0xa0>
        {
            LCD_Draw_Filled_Rectangle(0, 80, 300, 100, 0xffff);
 80007d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2364      	movs	r3, #100	@ 0x64
 80007de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80007e2:	2150      	movs	r1, #80	@ 0x50
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 fc21 	bl	800102c <LCD_Draw_Filled_Rectangle>
            Board displayBoard = boardInit();
 80007ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80007ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fea4 	bl	8000540 <boardInit>
            Shape currentShape = createShape(displayNum, &displayBoard);
 80007f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80007fc:	b2d9      	uxtb	r1, r3
 80007fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000802:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000806:	1d3a      	adds	r2, r7, #4
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fdc3 	bl	8001394 <createShape>
        	displayShape(&currentShape, &displayBoard);
 800080e:	1d3a      	adds	r2, r7, #4
 8000810:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000814:	4611      	mov	r1, r2
 8000816:	4618      	mov	r0, r3
 8000818:	f000 feb8 	bl	800158c <displayShape>
            uint32_t events = getScheduledEvents();
 800081c:	f000 fd88 	bl	8001330 <getScheduledEvents>
 8000820:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
            if (events & BUTTON_TOGGLE_EVENT)
 8000824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000828:	f003 0304 	and.w	r3, r3, #4
 800082c:	2b00      	cmp	r3, #0
 800082e:	d005      	beq.n	800083c <gameLoop+0x80>
            {
                run = true;
 8000830:	2301      	movs	r3, #1
 8000832:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
                removeSchedulerEvent(BUTTON_TOGGLE_EVENT);
 8000836:	2004      	movs	r0, #4
 8000838:	f000 fd98 	bl	800136c <removeSchedulerEvent>
            }
            HAL_Delay(1000);
 800083c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000840:	f002 f9cc 	bl	8002bdc <HAL_Delay>
            displayNum++;
 8000844:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000848:	3301      	adds	r3, #1
 800084a:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
            if(displayNum==7){displayNum=0;}
 800084e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000852:	2b07      	cmp	r3, #7
 8000854:	d102      	bne.n	800085c <gameLoop+0xa0>
 8000856:	2300      	movs	r3, #0
 8000858:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
    while (!run)
 800085c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8000860:	f083 0301 	eor.w	r3, r3, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1b5      	bne.n	80007d6 <gameLoop+0x1a>

        }


    LCD_Clear(0, LCD_COLOR_WHITE);
 800086a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800086e:	2000      	movs	r0, #0
 8000870:	f000 fc7a 	bl	8001168 <LCD_Clear>
    RNG_HandleTypeDef hrng = {0};
 8000874:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
    hrng.Instance = RNG;
 8000882:	4b5a      	ldr	r3, [pc, #360]	@ (80009ec <gameLoop+0x230>)
 8000884:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    HAL_RNG_Init(&hrng);
 8000888:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800088c:	4618      	mov	r0, r3
 800088e:	f004 feed 	bl	800566c <HAL_RNG_Init>

    uint32_t random32bit = 7;
 8000892:	2307      	movs	r3, #7
 8000894:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    Board newBoard = boardInit();
 8000898:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe4f 	bl	8000540 <boardInit>
    newBoard.startTime = HAL_GetTick();
 80008a2:	f002 f98f 	bl	8002bc4 <HAL_GetTick>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    while (run)
 80008ac:	e087      	b.n	80009be <gameLoop+0x202>
    {
        HAL_RNG_GenerateRandomNumber(&hrng, &random32bit);
 80008ae:	f507 72ee 	add.w	r2, r7, #476	@ 0x1dc
 80008b2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f004 ff01 	bl	80056c0 <HAL_RNG_GenerateRandomNumber>
        Shape currentShape = createShape((uint8_t)random32bit % 7, &newBoard);
 80008be:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4b4a      	ldr	r3, [pc, #296]	@ (80009f0 <gameLoop+0x234>)
 80008c6:	fba3 1302 	umull	r1, r3, r3, r2
 80008ca:	1ad1      	subs	r1, r2, r3
 80008cc:	0849      	lsrs	r1, r1, #1
 80008ce:	440b      	add	r3, r1
 80008d0:	0899      	lsrs	r1, r3, #2
 80008d2:	460b      	mov	r3, r1
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	1a5b      	subs	r3, r3, r1
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	b2d9      	uxtb	r1, r3
 80008dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80008e0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80008e4:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fd53 	bl	8001394 <createShape>
        if (!newBoard.gameOver){
 80008ee:	f897 310c 	ldrb.w	r3, [r7, #268]	@ 0x10c
 80008f2:	f083 0301 	eor.w	r3, r3, #1
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d05d      	beq.n	80009b8 <gameLoop+0x1fc>
        drawShape(&currentShape, &newBoard);
 80008fc:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8000900:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fe30 	bl	800156c <drawShape>
        HAL_Delay(300);
 800090c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000910:	f002 f964 	bl	8002bdc <HAL_Delay>
        while (canFall(&currentShape, &newBoard))
 8000914:	e041      	b.n	800099a <gameLoop+0x1de>
        {
        	STMPE811_ReadTouch(&touchData);
 8000916:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fe17 	bl	800254e <STMPE811_ReadTouch>

        	if (touchData.pressed == STMPE811_State_Pressed)
 8000920:	f897 31f4 	ldrb.w	r3, [r7, #500]	@ 0x1f4
 8000924:	2b00      	cmp	r3, #0
 8000926:	d117      	bne.n	8000958 <gameLoop+0x19c>
				{
        		touchData.pressed = STMPE811_State_Released;
 8000928:	2301      	movs	r3, #1
 800092a:	f887 31f4 	strb.w	r3, [r7, #500]	@ 0x1f4
        		if(touchData.x>120)
 800092e:	f8b7 31f0 	ldrh.w	r3, [r7, #496]	@ 0x1f0
 8000932:	2b78      	cmp	r3, #120	@ 0x78
 8000934:	d908      	bls.n	8000948 <gameLoop+0x18c>
        		{
        			moveLeft(&currentShape, &newBoard);
 8000936:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800093a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f000 ff39 	bl	80017b8 <moveLeft>
 8000946:	e007      	b.n	8000958 <gameLoop+0x19c>
        		}
        		else
        		{
        			moveRight(&currentShape, &newBoard);
 8000948:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800094c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f000 ff46 	bl	80017e4 <moveRight>

        		}
				}
            uint32_t events = getScheduledEvents();
 8000958:	f000 fcea 	bl	8001330 <getScheduledEvents>
 800095c:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
            if (events & BUTTON_TOGGLE_EVENT)
 8000960:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	2b00      	cmp	r3, #0
 800096a:	d00a      	beq.n	8000982 <gameLoop+0x1c6>
            {
                rotateShape(&currentShape, &newBoard);
 800096c:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8000970:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000974:	4611      	mov	r1, r2
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fd6a 	bl	8001450 <rotateShape>
                removeSchedulerEvent(BUTTON_TOGGLE_EVENT);
 800097c:	2004      	movs	r0, #4
 800097e:	f000 fcf5 	bl	800136c <removeSchedulerEvent>
            }
            moveDown(&currentShape, &newBoard);
 8000982:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8000986:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800098a:	4611      	mov	r1, r2
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fefd 	bl	800178c <moveDown>
            HAL_Delay(300);
 8000992:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000996:	f002 f921 	bl	8002bdc <HAL_Delay>
        while (canFall(&currentShape, &newBoard))
 800099a:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800099e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 ff33 	bl	8001810 <canFall>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1b2      	bne.n	8000916 <gameLoop+0x15a>
        }
        HAL_Delay(100);
 80009b0:	2064      	movs	r0, #100	@ 0x64
 80009b2:	f002 f913 	bl	8002bdc <HAL_Delay>
 80009b6:	e002      	b.n	80009be <gameLoop+0x202>

        }
        else
        {
            run = false;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    while (run)
 80009be:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f47f af73 	bne.w	80008ae <gameLoop+0xf2>
        }
    }
    endScreen(HAL_GetTick() - newBoard.startTime);
 80009c8:	f002 f8fc 	bl	8002bc4 <HAL_GetTick>
 80009cc:	4603      	mov	r3, r0
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	b29b      	uxth	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f80a 	bl	80009f4 <endScreen>
}
 80009e0:	bf00      	nop
 80009e2:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	50060800 	.word	0x50060800
 80009f0:	24924925 	.word	0x24924925

080009f4 <endScreen>:

void endScreen(uint16_t timePlayed)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	80fb      	strh	r3, [r7, #6]
    LCD_Clear(0, LCD_COLOR_BLACK);
 80009fe:	2100      	movs	r1, #0
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 fbb1 	bl	8001168 <LCD_Clear>
    LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a06:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000a0a:	f000 fbcf 	bl	80011ac <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000a0e:	4866      	ldr	r0, [pc, #408]	@ (8000ba8 <endScreen+0x1b4>)
 8000a10:	f000 fbdc 	bl	80011cc <LCD_SetFont>
    LCD_DisplayChar(60, 100, 'G');
 8000a14:	2247      	movs	r2, #71	@ 0x47
 8000a16:	2164      	movs	r1, #100	@ 0x64
 8000a18:	203c      	movs	r0, #60	@ 0x3c
 8000a1a:	f000 fc55 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(75, 100, 'A');
 8000a1e:	2241      	movs	r2, #65	@ 0x41
 8000a20:	2164      	movs	r1, #100	@ 0x64
 8000a22:	204b      	movs	r0, #75	@ 0x4b
 8000a24:	f000 fc50 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(90, 100, 'M');
 8000a28:	224d      	movs	r2, #77	@ 0x4d
 8000a2a:	2164      	movs	r1, #100	@ 0x64
 8000a2c:	205a      	movs	r0, #90	@ 0x5a
 8000a2e:	f000 fc4b 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(105, 100, 'E');
 8000a32:	2245      	movs	r2, #69	@ 0x45
 8000a34:	2164      	movs	r1, #100	@ 0x64
 8000a36:	2069      	movs	r0, #105	@ 0x69
 8000a38:	f000 fc46 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(130, 100, 'O');
 8000a3c:	224f      	movs	r2, #79	@ 0x4f
 8000a3e:	2164      	movs	r1, #100	@ 0x64
 8000a40:	2082      	movs	r0, #130	@ 0x82
 8000a42:	f000 fc41 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(145, 100, 'V');
 8000a46:	2256      	movs	r2, #86	@ 0x56
 8000a48:	2164      	movs	r1, #100	@ 0x64
 8000a4a:	2091      	movs	r0, #145	@ 0x91
 8000a4c:	f000 fc3c 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(160, 100, 'E');
 8000a50:	2245      	movs	r2, #69	@ 0x45
 8000a52:	2164      	movs	r1, #100	@ 0x64
 8000a54:	20a0      	movs	r0, #160	@ 0xa0
 8000a56:	f000 fc37 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(175, 100, 'R');
 8000a5a:	2252      	movs	r2, #82	@ 0x52
 8000a5c:	2164      	movs	r1, #100	@ 0x64
 8000a5e:	20af      	movs	r0, #175	@ 0xaf
 8000a60:	f000 fc32 	bl	80012c8 <LCD_DisplayChar>
    LCD_SetFont(&Font12x12);
 8000a64:	4851      	ldr	r0, [pc, #324]	@ (8000bac <endScreen+0x1b8>)
 8000a66:	f000 fbb1 	bl	80011cc <LCD_SetFont>
    LCD_DisplayChar(40, 150, 'T');
 8000a6a:	2254      	movs	r2, #84	@ 0x54
 8000a6c:	2196      	movs	r1, #150	@ 0x96
 8000a6e:	2028      	movs	r0, #40	@ 0x28
 8000a70:	f000 fc2a 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(52, 150, 'i');
 8000a74:	2269      	movs	r2, #105	@ 0x69
 8000a76:	2196      	movs	r1, #150	@ 0x96
 8000a78:	2034      	movs	r0, #52	@ 0x34
 8000a7a:	f000 fc25 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(64, 150, 'm');
 8000a7e:	226d      	movs	r2, #109	@ 0x6d
 8000a80:	2196      	movs	r1, #150	@ 0x96
 8000a82:	2040      	movs	r0, #64	@ 0x40
 8000a84:	f000 fc20 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(76, 150, 'e');
 8000a88:	2265      	movs	r2, #101	@ 0x65
 8000a8a:	2196      	movs	r1, #150	@ 0x96
 8000a8c:	204c      	movs	r0, #76	@ 0x4c
 8000a8e:	f000 fc1b 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(88, 150, ' ');
 8000a92:	2220      	movs	r2, #32
 8000a94:	2196      	movs	r1, #150	@ 0x96
 8000a96:	2058      	movs	r0, #88	@ 0x58
 8000a98:	f000 fc16 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(100, 150, 'P');
 8000a9c:	2250      	movs	r2, #80	@ 0x50
 8000a9e:	2196      	movs	r1, #150	@ 0x96
 8000aa0:	2064      	movs	r0, #100	@ 0x64
 8000aa2:	f000 fc11 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(112, 150, 'l');
 8000aa6:	226c      	movs	r2, #108	@ 0x6c
 8000aa8:	2196      	movs	r1, #150	@ 0x96
 8000aaa:	2070      	movs	r0, #112	@ 0x70
 8000aac:	f000 fc0c 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(124, 150, 'a');
 8000ab0:	2261      	movs	r2, #97	@ 0x61
 8000ab2:	2196      	movs	r1, #150	@ 0x96
 8000ab4:	207c      	movs	r0, #124	@ 0x7c
 8000ab6:	f000 fc07 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(136, 150, 'y');
 8000aba:	2279      	movs	r2, #121	@ 0x79
 8000abc:	2196      	movs	r1, #150	@ 0x96
 8000abe:	2088      	movs	r0, #136	@ 0x88
 8000ac0:	f000 fc02 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(148, 150, 'e');
 8000ac4:	2265      	movs	r2, #101	@ 0x65
 8000ac6:	2196      	movs	r1, #150	@ 0x96
 8000ac8:	2094      	movs	r0, #148	@ 0x94
 8000aca:	f000 fbfd 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(160, 150, 'd');
 8000ace:	2264      	movs	r2, #100	@ 0x64
 8000ad0:	2196      	movs	r1, #150	@ 0x96
 8000ad2:	20a0      	movs	r0, #160	@ 0xa0
 8000ad4:	f000 fbf8 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(172, 150, ':');
 8000ad8:	223a      	movs	r2, #58	@ 0x3a
 8000ada:	2196      	movs	r1, #150	@ 0x96
 8000adc:	20ac      	movs	r0, #172	@ 0xac
 8000ade:	f000 fbf3 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(184, 150, ' ');
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	2196      	movs	r1, #150	@ 0x96
 8000ae6:	20b8      	movs	r0, #184	@ 0xb8
 8000ae8:	f000 fbee 	bl	80012c8 <LCD_DisplayChar>
    uint16_t seconds = timePlayed / 1000;
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	4a30      	ldr	r2, [pc, #192]	@ (8000bb0 <endScreen+0x1bc>)
 8000af0:	fba2 2303 	umull	r2, r3, r2, r3
 8000af4:	099b      	lsrs	r3, r3, #6
 8000af6:	83fb      	strh	r3, [r7, #30]
    char digits[5];
    int index = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
    if (seconds == 0)
 8000afc:	8bfb      	ldrh	r3, [r7, #30]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d123      	bne.n	8000b4a <endScreen+0x156>
    {
        digits[index++] = '0';
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	1c5a      	adds	r2, r3, #1
 8000b06:	61ba      	str	r2, [r7, #24]
 8000b08:	3320      	adds	r3, #32
 8000b0a:	443b      	add	r3, r7
 8000b0c:	2230      	movs	r2, #48	@ 0x30
 8000b0e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8000b12:	e01d      	b.n	8000b50 <endScreen+0x15c>
    }
    else
    {
        while (seconds > 0)
        {
            digits[index++] = (seconds % 10) + '0';
 8000b14:	8bfa      	ldrh	r2, [r7, #30]
 8000b16:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <endScreen+0x1c0>)
 8000b18:	fba3 1302 	umull	r1, r3, r3, r2
 8000b1c:	08d9      	lsrs	r1, r3, #3
 8000b1e:	460b      	mov	r3, r1
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	440b      	add	r3, r1
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	1c59      	adds	r1, r3, #1
 8000b30:	61b9      	str	r1, [r7, #24]
 8000b32:	3230      	adds	r2, #48	@ 0x30
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	3320      	adds	r3, #32
 8000b38:	443b      	add	r3, r7
 8000b3a:	f803 2c18 	strb.w	r2, [r3, #-24]
            seconds /= 10;
 8000b3e:	8bfb      	ldrh	r3, [r7, #30]
 8000b40:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb4 <endScreen+0x1c0>)
 8000b42:	fba2 2303 	umull	r2, r3, r2, r3
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	83fb      	strh	r3, [r7, #30]
        while (seconds > 0)
 8000b4a:	8bfb      	ldrh	r3, [r7, #30]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1e1      	bne.n	8000b14 <endScreen+0x120>
        }
    }
    uint16_t xPosition = 200;
 8000b50:	23c8      	movs	r3, #200	@ 0xc8
 8000b52:	82fb      	strh	r3, [r7, #22]
    for (int i = index - 1; i >= 0; i--)
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	e00f      	b.n	8000b7c <endScreen+0x188>
    {
        LCD_DisplayChar(xPosition, 150, digits[i]);
 8000b5c:	f107 0208 	add.w	r2, r7, #8
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4413      	add	r3, r2
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	8afb      	ldrh	r3, [r7, #22]
 8000b68:	2196      	movs	r1, #150	@ 0x96
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fbac 	bl	80012c8 <LCD_DisplayChar>
        xPosition += 12;
 8000b70:	8afb      	ldrh	r3, [r7, #22]
 8000b72:	330c      	adds	r3, #12
 8000b74:	82fb      	strh	r3, [r7, #22]
    for (int i = index - 1; i >= 0; i--)
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	daec      	bge.n	8000b5c <endScreen+0x168>
    }
    LCD_DisplayChar(xPosition, 150, ' ');
 8000b82:	8afb      	ldrh	r3, [r7, #22]
 8000b84:	2220      	movs	r2, #32
 8000b86:	2196      	movs	r1, #150	@ 0x96
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fb9d 	bl	80012c8 <LCD_DisplayChar>
    xPosition += 12;
 8000b8e:	8afb      	ldrh	r3, [r7, #22]
 8000b90:	330c      	adds	r3, #12
 8000b92:	82fb      	strh	r3, [r7, #22]
    LCD_DisplayChar(xPosition, 150, 's');
 8000b94:	8afb      	ldrh	r3, [r7, #22]
 8000b96:	2273      	movs	r2, #115	@ 0x73
 8000b98:	2196      	movs	r1, #150	@ 0x96
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fb94 	bl	80012c8 <LCD_DisplayChar>
}
 8000ba0:	bf00      	nop
 8000ba2:	3720      	adds	r7, #32
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000004 	.word	0x20000004
 8000bac:	2000000c 	.word	0x2000000c
 8000bb0:	10624dd3 	.word	0x10624dd3
 8000bb4:	cccccccd 	.word	0xcccccccd

08000bb8 <titleScreen>:

void titleScreen()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
    LCD_Clear(0, LCD_COLOR_WHITE);
 8000bbc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fad1 	bl	8001168 <LCD_Clear>

    LCD_SetTextColor(LCD_COLOR_RED);
 8000bc6:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8000bca:	f000 faef 	bl	80011ac <LCD_SetTextColor>
    LCD_SetFont(&Font16x24);
 8000bce:	4854      	ldr	r0, [pc, #336]	@ (8000d20 <titleScreen+0x168>)
 8000bd0:	f000 fafc 	bl	80011cc <LCD_SetFont>
    LCD_DisplayChar(40, 40, 'T');
 8000bd4:	2254      	movs	r2, #84	@ 0x54
 8000bd6:	2128      	movs	r1, #40	@ 0x28
 8000bd8:	2028      	movs	r0, #40	@ 0x28
 8000bda:	f000 fb75 	bl	80012c8 <LCD_DisplayChar>
    LCD_SetTextColor(LCD_COLOR_BLUE);
 8000bde:	201f      	movs	r0, #31
 8000be0:	f000 fae4 	bl	80011ac <LCD_SetTextColor>
    LCD_DisplayChar(70, 40, 'E');
 8000be4:	2245      	movs	r2, #69	@ 0x45
 8000be6:	2128      	movs	r1, #40	@ 0x28
 8000be8:	2046      	movs	r0, #70	@ 0x46
 8000bea:	f000 fb6d 	bl	80012c8 <LCD_DisplayChar>
    LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8000bee:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 8000bf2:	f000 fadb 	bl	80011ac <LCD_SetTextColor>
    LCD_DisplayChar(100, 40, 'T');
 8000bf6:	2254      	movs	r2, #84	@ 0x54
 8000bf8:	2128      	movs	r1, #40	@ 0x28
 8000bfa:	2064      	movs	r0, #100	@ 0x64
 8000bfc:	f000 fb64 	bl	80012c8 <LCD_DisplayChar>
    LCD_SetTextColor(LCD_COLOR_GREEN);
 8000c00:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8000c04:	f000 fad2 	bl	80011ac <LCD_SetTextColor>
    LCD_DisplayChar(130, 40, 'R');
 8000c08:	2252      	movs	r2, #82	@ 0x52
 8000c0a:	2128      	movs	r1, #40	@ 0x28
 8000c0c:	2082      	movs	r0, #130	@ 0x82
 8000c0e:	f000 fb5b 	bl	80012c8 <LCD_DisplayChar>
    LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000c12:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000c16:	f000 fac9 	bl	80011ac <LCD_SetTextColor>
    LCD_DisplayChar(160, 40, 'I');
 8000c1a:	2249      	movs	r2, #73	@ 0x49
 8000c1c:	2128      	movs	r1, #40	@ 0x28
 8000c1e:	20a0      	movs	r0, #160	@ 0xa0
 8000c20:	f000 fb52 	bl	80012c8 <LCD_DisplayChar>
    LCD_SetTextColor(LCD_COLOR_BLUE);
 8000c24:	201f      	movs	r0, #31
 8000c26:	f000 fac1 	bl	80011ac <LCD_SetTextColor>
    LCD_DisplayChar(190, 40, 'S');
 8000c2a:	2253      	movs	r2, #83	@ 0x53
 8000c2c:	2128      	movs	r1, #40	@ 0x28
 8000c2e:	20be      	movs	r0, #190	@ 0xbe
 8000c30:	f000 fb4a 	bl	80012c8 <LCD_DisplayChar>


    LCD_SetTextColor(LCD_COLOR_BLACK);
 8000c34:	2000      	movs	r0, #0
 8000c36:	f000 fab9 	bl	80011ac <LCD_SetTextColor>

    LCD_SetFont(&Font16x24);
 8000c3a:	4839      	ldr	r0, [pc, #228]	@ (8000d20 <titleScreen+0x168>)
 8000c3c:	f000 fac6 	bl	80011cc <LCD_SetFont>
    LCD_DisplayChar(30, 250, 'P');
 8000c40:	2250      	movs	r2, #80	@ 0x50
 8000c42:	21fa      	movs	r1, #250	@ 0xfa
 8000c44:	201e      	movs	r0, #30
 8000c46:	f000 fb3f 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(45, 250, 'r');
 8000c4a:	2272      	movs	r2, #114	@ 0x72
 8000c4c:	21fa      	movs	r1, #250	@ 0xfa
 8000c4e:	202d      	movs	r0, #45	@ 0x2d
 8000c50:	f000 fb3a 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(55, 250, 'e');
 8000c54:	2265      	movs	r2, #101	@ 0x65
 8000c56:	21fa      	movs	r1, #250	@ 0xfa
 8000c58:	2037      	movs	r0, #55	@ 0x37
 8000c5a:	f000 fb35 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(65, 250, 's');
 8000c5e:	2273      	movs	r2, #115	@ 0x73
 8000c60:	21fa      	movs	r1, #250	@ 0xfa
 8000c62:	2041      	movs	r0, #65	@ 0x41
 8000c64:	f000 fb30 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(75, 250, 's');
 8000c68:	2273      	movs	r2, #115	@ 0x73
 8000c6a:	21fa      	movs	r1, #250	@ 0xfa
 8000c6c:	204b      	movs	r0, #75	@ 0x4b
 8000c6e:	f000 fb2b 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(90, 250, ' ');
 8000c72:	2220      	movs	r2, #32
 8000c74:	21fa      	movs	r1, #250	@ 0xfa
 8000c76:	205a      	movs	r0, #90	@ 0x5a
 8000c78:	f000 fb26 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(105, 250, 'b');
 8000c7c:	2262      	movs	r2, #98	@ 0x62
 8000c7e:	21fa      	movs	r1, #250	@ 0xfa
 8000c80:	2069      	movs	r0, #105	@ 0x69
 8000c82:	f000 fb21 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(115, 250, 'u');
 8000c86:	2275      	movs	r2, #117	@ 0x75
 8000c88:	21fa      	movs	r1, #250	@ 0xfa
 8000c8a:	2073      	movs	r0, #115	@ 0x73
 8000c8c:	f000 fb1c 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(125, 250, 't');
 8000c90:	2274      	movs	r2, #116	@ 0x74
 8000c92:	21fa      	movs	r1, #250	@ 0xfa
 8000c94:	207d      	movs	r0, #125	@ 0x7d
 8000c96:	f000 fb17 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(135, 250, 't');
 8000c9a:	2274      	movs	r2, #116	@ 0x74
 8000c9c:	21fa      	movs	r1, #250	@ 0xfa
 8000c9e:	2087      	movs	r0, #135	@ 0x87
 8000ca0:	f000 fb12 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(145, 250, 'o');
 8000ca4:	226f      	movs	r2, #111	@ 0x6f
 8000ca6:	21fa      	movs	r1, #250	@ 0xfa
 8000ca8:	2091      	movs	r0, #145	@ 0x91
 8000caa:	f000 fb0d 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(155, 250, 'n');
 8000cae:	226e      	movs	r2, #110	@ 0x6e
 8000cb0:	21fa      	movs	r1, #250	@ 0xfa
 8000cb2:	209b      	movs	r0, #155	@ 0x9b
 8000cb4:	f000 fb08 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(170, 250, ' ');
 8000cb8:	2220      	movs	r2, #32
 8000cba:	21fa      	movs	r1, #250	@ 0xfa
 8000cbc:	20aa      	movs	r0, #170	@ 0xaa
 8000cbe:	f000 fb03 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(185, 250, 't');
 8000cc2:	2274      	movs	r2, #116	@ 0x74
 8000cc4:	21fa      	movs	r1, #250	@ 0xfa
 8000cc6:	20b9      	movs	r0, #185	@ 0xb9
 8000cc8:	f000 fafe 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(195, 250, 'o');
 8000ccc:	226f      	movs	r2, #111	@ 0x6f
 8000cce:	21fa      	movs	r1, #250	@ 0xfa
 8000cd0:	20c3      	movs	r0, #195	@ 0xc3
 8000cd2:	f000 faf9 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(210, 250, ' ');
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	21fa      	movs	r1, #250	@ 0xfa
 8000cda:	20d2      	movs	r0, #210	@ 0xd2
 8000cdc:	f000 faf4 	bl	80012c8 <LCD_DisplayChar>

    LCD_DisplayChar(95, 275, 's');
 8000ce0:	2273      	movs	r2, #115	@ 0x73
 8000ce2:	f240 1113 	movw	r1, #275	@ 0x113
 8000ce6:	205f      	movs	r0, #95	@ 0x5f
 8000ce8:	f000 faee 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(105, 275, 't');
 8000cec:	2274      	movs	r2, #116	@ 0x74
 8000cee:	f240 1113 	movw	r1, #275	@ 0x113
 8000cf2:	2069      	movs	r0, #105	@ 0x69
 8000cf4:	f000 fae8 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(115, 275, 'a');
 8000cf8:	2261      	movs	r2, #97	@ 0x61
 8000cfa:	f240 1113 	movw	r1, #275	@ 0x113
 8000cfe:	2073      	movs	r0, #115	@ 0x73
 8000d00:	f000 fae2 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(125, 275, 'r');
 8000d04:	2272      	movs	r2, #114	@ 0x72
 8000d06:	f240 1113 	movw	r1, #275	@ 0x113
 8000d0a:	207d      	movs	r0, #125	@ 0x7d
 8000d0c:	f000 fadc 	bl	80012c8 <LCD_DisplayChar>
    LCD_DisplayChar(135, 275, 't');
 8000d10:	2274      	movs	r2, #116	@ 0x74
 8000d12:	f240 1113 	movw	r1, #275	@ 0x113
 8000d16:	2087      	movs	r0, #135	@ 0x87
 8000d18:	f000 fad6 	bl	80012c8 <LCD_DisplayChar>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000004 	.word	0x20000004

08000d24 <LCD_GPIO_Init>:

// Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT] = {0}; // 16bpp pixel format.

void LCD_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	@ 0x30
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	4b5a      	ldr	r3, [pc, #360]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d32:	4a59      	ldr	r2, [pc, #356]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d3a:	4b57      	ldr	r3, [pc, #348]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	4b53      	ldr	r3, [pc, #332]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a52      	ldr	r2, [pc, #328]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b50      	ldr	r3, [pc, #320]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b4c      	ldr	r3, [pc, #304]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a4b      	ldr	r2, [pc, #300]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b49      	ldr	r3, [pc, #292]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b45      	ldr	r3, [pc, #276]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a44      	ldr	r2, [pc, #272]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b42      	ldr	r3, [pc, #264]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a3d      	ldr	r2, [pc, #244]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b3b      	ldr	r3, [pc, #236]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b37      	ldr	r3, [pc, #220]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a36      	ldr	r2, [pc, #216]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b34      	ldr	r3, [pc, #208]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0320 	and.w	r3, r3, #32
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b30      	ldr	r3, [pc, #192]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a2f      	ldr	r2, [pc, #188]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000ddc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <LCD_GPIO_Init+0x174>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000dee:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000df2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8000e00:	230e      	movs	r3, #14
 8000e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000e04:	f107 031c 	add.w	r3, r7, #28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4824      	ldr	r0, [pc, #144]	@ (8000e9c <LCD_GPIO_Init+0x178>)
 8000e0c:	f002 f84e 	bl	8002eac <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 |
 8000e10:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000e14:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4820      	ldr	r0, [pc, #128]	@ (8000ea0 <LCD_GPIO_Init+0x17c>)
 8000e1e:	f002 f845 	bl	8002eac <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000e22:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000e26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481d      	ldr	r0, [pc, #116]	@ (8000ea4 <LCD_GPIO_Init+0x180>)
 8000e30:	f002 f83c 	bl	8002eac <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000e34:	2348      	movs	r3, #72	@ 0x48
 8000e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481a      	ldr	r0, [pc, #104]	@ (8000ea8 <LCD_GPIO_Init+0x184>)
 8000e40:	f002 f834 	bl	8002eac <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4816      	ldr	r0, [pc, #88]	@ (8000eac <LCD_GPIO_Init+0x188>)
 8000e52:	f002 f82b 	bl	8002eac <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 |
 8000e56:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000e5a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	4813      	ldr	r0, [pc, #76]	@ (8000eb0 <LCD_GPIO_Init+0x18c>)
 8000e64:	f002 f822 	bl	8002eac <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8000e6c:	2309      	movs	r3, #9
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	480a      	ldr	r0, [pc, #40]	@ (8000ea0 <LCD_GPIO_Init+0x17c>)
 8000e78:	f002 f818 	bl	8002eac <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000e7c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	4809      	ldr	r0, [pc, #36]	@ (8000eb0 <LCD_GPIO_Init+0x18c>)
 8000e8a:	f002 f80f 	bl	8002eac <HAL_GPIO_Init>
}
 8000e8e:	bf00      	nop
 8000e90:	3730      	adds	r7, #48	@ 0x30
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020c00 	.word	0x40020c00
 8000eac:	40021400 	.word	0x40021400
 8000eb0:	40021800 	.word	0x40021800

08000eb4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b090      	sub	sp, #64	@ 0x40
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = 0;                     // Configures the Window HORZ START Position.
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;       // Configures the Window HORZ Stop Position.
 8000ec2:	23f0      	movs	r3, #240	@ 0xf0
 8000ec4:	613b      	str	r3, [r7, #16]
  pLayerCfg.WindowY0 = 0;                     // Configures the Window vertical START Position.
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;      // Configures the Window vertical Stop Position.
 8000eca:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ece:	61bb      	str	r3, [r7, #24]
  pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1; // INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.Alpha = 255;
 8000ed4:	23ff      	movs	r3, #255	@ 0xff
 8000ed6:	623b      	str	r3, [r7, #32]
  pLayerCfg.Alpha0 = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000edc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (LayerIndex == 0)
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <LTCD_Layer_Init+0x3c>
  {
    pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <LTCD_Layer_Init+0x78>)
 8000eee:	633b      	str	r3, [r7, #48]	@ 0x30
  }
  pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000ef0:	23f0      	movs	r3, #240	@ 0xf0
 8000ef2:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000ef4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.Backcolor.Blue = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  pLayerCfg.Backcolor.Green = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  pLayerCfg.Backcolor.Red = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000f0c:	79fa      	ldrb	r2, [r7, #7]
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	4619      	mov	r1, r3
 8000f14:	4806      	ldr	r0, [pc, #24]	@ (8000f30 <LTCD_Layer_Init+0x7c>)
 8000f16:	f003 fb8f 	bl	8004638 <HAL_LTDC_ConfigLayer>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <LTCD_Layer_Init+0x70>
  {
    LCD_Error_Handler();
 8000f20:	f000 f9f4 	bl	800130c <LCD_Error_Handler>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3740      	adds	r7, #64	@ 0x40
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20000124 	.word	0x20000124
 8000f30:	20000048 	.word	0x20000048

08000f34 <LTCD__Init>:
{
  LCD_Clear(0, LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  hltdc.Instance = LTDC;
 8000f38:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe8 <LTCD__Init+0xb4>)
 8000f3c:	601a      	str	r2, [r3, #0]
  /* Configure horizontal synchronization width */
  hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000f3e:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f40:	2209      	movs	r2, #9
 8000f42:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000f44:	4b27      	ldr	r3, [pc, #156]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000f4a:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f4c:	221d      	movs	r2, #29
 8000f4e:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000f50:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f52:	2203      	movs	r2, #3
 8000f54:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  hltdc.Init.AccumulatedActiveW = 269;
 8000f56:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f58:	f240 120d 	movw	r2, #269	@ 0x10d
 8000f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  hltdc.Init.AccumulatedActiveH = 323;
 8000f5e:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f60:	f240 1243 	movw	r2, #323	@ 0x143
 8000f64:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  hltdc.Init.TotalWidth = 279;
 8000f66:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f68:	f240 1217 	movw	r2, #279	@ 0x117
 8000f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  hltdc.Init.TotalHeigh = 327;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f70:	f240 1247 	movw	r2, #327	@ 0x147
 8000f74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Configure R,G,B component values for LCD background color */
  hltdc.Init.Backcolor.Red = 0;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  hltdc.Init.Backcolor.Blue = 0;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000f86:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <LTCD__Init+0xb8>)
 8000f90:	2208      	movs	r2, #8
 8000f92:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <LTCD__Init+0xb8>)
 8000f96:	22c0      	movs	r2, #192	@ 0xc0
 8000f98:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <LTCD__Init+0xb8>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <LTCD__Init+0xb8>)
 8000fa2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fa6:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000fa8:	4810      	ldr	r0, [pc, #64]	@ (8000fec <LTCD__Init+0xb8>)
 8000faa:	f004 f99f 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
  /* Polarity */
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]

  LCD_GPIO_Init();
 8000fc6:	f7ff fead 	bl	8000d24 <LCD_GPIO_Init>

  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fca:	4806      	ldr	r0, [pc, #24]	@ (8000fe4 <LTCD__Init+0xb0>)
 8000fcc:	f003 fa64 	bl	8004498 <HAL_LTDC_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <LTCD__Init+0xa6>
  {
    LCD_Error_Handler();
 8000fd6:	f000 f999 	bl	800130c <LCD_Error_Handler>
  }

  ili9341_Init();
 8000fda:	f000 fc6e 	bl	80018ba <ili9341_Init>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000048 	.word	0x20000048
 8000fe8:	40016800 	.word	0x40016800
 8000fec:	200000f0 	.word	0x200000f0

08000ff0 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	80bb      	strh	r3, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	807b      	strh	r3, [r7, #2]
  frameBuffer[y * LCD_PIXEL_WIDTH + x] = color; // You cannot do x*y to set the pixel.
 8001002:	88ba      	ldrh	r2, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	1a9b      	subs	r3, r3, r2
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	461a      	mov	r2, r3
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	4413      	add	r3, r2
 8001012:	4905      	ldr	r1, [pc, #20]	@ (8001028 <LCD_Draw_Pixel+0x38>)
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000124 	.word	0x20000124

0800102c <LCD_Draw_Filled_Rectangle>:
    }
  }
}

void LCD_Draw_Filled_Rectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800102c:	b490      	push	{r4, r7}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	4604      	mov	r4, r0
 8001034:	4608      	mov	r0, r1
 8001036:	4611      	mov	r1, r2
 8001038:	461a      	mov	r2, r3
 800103a:	4623      	mov	r3, r4
 800103c:	80fb      	strh	r3, [r7, #6]
 800103e:	4603      	mov	r3, r0
 8001040:	80bb      	strh	r3, [r7, #4]
 8001042:	460b      	mov	r3, r1
 8001044:	807b      	strh	r3, [r7, #2]
 8001046:	4613      	mov	r3, r2
 8001048:	803b      	strh	r3, [r7, #0]
  if (x + width > LCD_PIXEL_WIDTH)
 800104a:	88fa      	ldrh	r2, [r7, #6]
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	4413      	add	r3, r2
 8001050:	2bf0      	cmp	r3, #240	@ 0xf0
 8001052:	dd03      	ble.n	800105c <LCD_Draw_Filled_Rectangle+0x30>
    width = LCD_PIXEL_WIDTH - x;
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800105a:	807b      	strh	r3, [r7, #2]
  if (y + height > LCD_PIXEL_HEIGHT)
 800105c:	88ba      	ldrh	r2, [r7, #4]
 800105e:	883b      	ldrh	r3, [r7, #0]
 8001060:	4413      	add	r3, r2
 8001062:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001066:	dd03      	ble.n	8001070 <LCD_Draw_Filled_Rectangle+0x44>
    height = LCD_PIXEL_HEIGHT - y;
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800106e:	803b      	strh	r3, [r7, #0]

  for (uint16_t row = 0; row < height; row++)
 8001070:	2300      	movs	r3, #0
 8001072:	81fb      	strh	r3, [r7, #14]
 8001074:	e01e      	b.n	80010b4 <LCD_Draw_Filled_Rectangle+0x88>
  {
    uint32_t index = (y + row) * LCD_PIXEL_WIDTH + x;
 8001076:	88ba      	ldrh	r2, [r7, #4]
 8001078:	89fb      	ldrh	r3, [r7, #14]
 800107a:	441a      	add	r2, r3
 800107c:	4613      	mov	r3, r2
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	1a9b      	subs	r3, r3, r2
 8001082:	011b      	lsls	r3, r3, #4
 8001084:	461a      	mov	r2, r3
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	4413      	add	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
    for (uint16_t col = 0; col < width; col++)
 800108c:	2300      	movs	r3, #0
 800108e:	81bb      	strh	r3, [r7, #12]
 8001090:	e009      	b.n	80010a6 <LCD_Draw_Filled_Rectangle+0x7a>
    {
      frameBuffer[index + col] = color;
 8001092:	89ba      	ldrh	r2, [r7, #12]
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4413      	add	r3, r2
 8001098:	490b      	ldr	r1, [pc, #44]	@ (80010c8 <LCD_Draw_Filled_Rectangle+0x9c>)
 800109a:	8b3a      	ldrh	r2, [r7, #24]
 800109c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint16_t col = 0; col < width; col++)
 80010a0:	89bb      	ldrh	r3, [r7, #12]
 80010a2:	3301      	adds	r3, #1
 80010a4:	81bb      	strh	r3, [r7, #12]
 80010a6:	89ba      	ldrh	r2, [r7, #12]
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d3f1      	bcc.n	8001092 <LCD_Draw_Filled_Rectangle+0x66>
  for (uint16_t row = 0; row < height; row++)
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	3301      	adds	r3, #1
 80010b2:	81fb      	strh	r3, [r7, #14]
 80010b4:	89fa      	ldrh	r2, [r7, #14]
 80010b6:	883b      	ldrh	r3, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3dc      	bcc.n	8001076 <LCD_Draw_Filled_Rectangle+0x4a>
    }
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc90      	pop	{r4, r7}
 80010c6:	4770      	bx	lr
 80010c8:	20000124 	.word	0x20000124

080010cc <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	80fb      	strh	r3, [r7, #6]
 80010de:	4603      	mov	r3, r0
 80010e0:	80bb      	strh	r3, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	807b      	strh	r3, [r7, #2]
 80010e6:	4613      	mov	r3, r2
 80010e8:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	81fb      	strh	r3, [r7, #14]
 80010ee:	e00b      	b.n	8001108 <LCD_Draw_Vertical_Line+0x3c>
  {
    LCD_Draw_Pixel(x, i + y, color);
 80010f0:	89fa      	ldrh	r2, [r7, #14]
 80010f2:	88bb      	ldrh	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	b299      	uxth	r1, r3
 80010f8:	883a      	ldrh	r2, [r7, #0]
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff77 	bl	8000ff0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001102:	89fb      	ldrh	r3, [r7, #14]
 8001104:	3301      	adds	r3, #1
 8001106:	81fb      	strh	r3, [r7, #14]
 8001108:	89fa      	ldrh	r2, [r7, #14]
 800110a:	887b      	ldrh	r3, [r7, #2]
 800110c:	429a      	cmp	r2, r3
 800110e:	d3ef      	bcc.n	80010f0 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	bd90      	pop	{r4, r7, pc}

0800111a <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800111a:	b590      	push	{r4, r7, lr}
 800111c:	b085      	sub	sp, #20
 800111e:	af00      	add	r7, sp, #0
 8001120:	4604      	mov	r4, r0
 8001122:	4608      	mov	r0, r1
 8001124:	4611      	mov	r1, r2
 8001126:	461a      	mov	r2, r3
 8001128:	4623      	mov	r3, r4
 800112a:	80fb      	strh	r3, [r7, #6]
 800112c:	4603      	mov	r3, r0
 800112e:	80bb      	strh	r3, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
 8001134:	4613      	mov	r3, r2
 8001136:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001138:	2300      	movs	r3, #0
 800113a:	81fb      	strh	r3, [r7, #14]
 800113c:	e00b      	b.n	8001156 <LCD_Draw_Horizontal_Line+0x3c>
  {
    LCD_Draw_Pixel(x + i, y, color);
 800113e:	88fa      	ldrh	r2, [r7, #6]
 8001140:	89fb      	ldrh	r3, [r7, #14]
 8001142:	4413      	add	r3, r2
 8001144:	b29b      	uxth	r3, r3
 8001146:	883a      	ldrh	r2, [r7, #0]
 8001148:	88b9      	ldrh	r1, [r7, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff50 	bl	8000ff0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	3301      	adds	r3, #1
 8001154:	81fb      	strh	r3, [r7, #14]
 8001156:	89fa      	ldrh	r2, [r7, #14]
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	429a      	cmp	r2, r3
 800115c:	d3ef      	bcc.n	800113e <LCD_Draw_Horizontal_Line+0x24>
  }
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bd90      	pop	{r4, r7, pc}

08001168 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	80bb      	strh	r3, [r7, #4]
  if (LayerIndex == 0)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10e      	bne.n	800119c <LCD_Clear+0x34>
  {
    for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++)
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	e007      	b.n	8001194 <LCD_Clear+0x2c>
    {
      frameBuffer[i] = Color;
 8001184:	4908      	ldr	r1, [pc, #32]	@ (80011a8 <LCD_Clear+0x40>)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	88ba      	ldrh	r2, [r7, #4]
 800118a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3301      	adds	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800119a:	d3f3      	bcc.n	8001184 <LCD_Clear+0x1c>
    }
  }
  // TODO: Add more Layers if needed
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	20000124 	.word	0x20000124

080011ac <LCD_SetTextColor>:

// This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <LCD_SetTextColor+0x1c>)
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	8013      	strh	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	20000000 	.word	0x20000000

080011cc <LCD_SetFont>:

// This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <LCD_SetFont+0x1c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000120 	.word	0x20000120

080011ec <LCD_Draw_Char>:

// This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	603a      	str	r2, [r7, #0]
 80011f6:	80fb      	strh	r3, [r7, #6]
 80011f8:	460b      	mov	r3, r1
 80011fa:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  for (index = 0; index < LCD_Currentfonts->Height; index++)
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	e04c      	b.n	80012a4 <LCD_Draw_Char+0xb8>
  {
    for (counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	e03f      	b.n	8001290 <LCD_Draw_Char+0xa4>
    {
      if ((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12) * 8)) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00) && (LCD_Currentfonts->Width > 12)))
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	4b27      	ldr	r3, [pc, #156]	@ (80012bc <LCD_Draw_Char+0xd0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	889b      	ldrh	r3, [r3, #4]
 8001222:	4a27      	ldr	r2, [pc, #156]	@ (80012c0 <LCD_Draw_Char+0xd4>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	08db      	lsrs	r3, r3, #3
 800122a:	b29b      	uxth	r3, r3
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	2280      	movs	r2, #128	@ 0x80
 8001230:	409a      	lsls	r2, r3
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	fa42 f303 	asr.w	r3, r2, r3
 8001238:	400b      	ands	r3, r1
 800123a:	2b00      	cmp	r3, #0
 800123c:	d104      	bne.n	8001248 <LCD_Draw_Char+0x5c>
 800123e:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <LCD_Draw_Char+0xd0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	889b      	ldrh	r3, [r3, #4]
 8001244:	2b0c      	cmp	r3, #12
 8001246:	d920      	bls.n	800128a <LCD_Draw_Char+0x9e>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	4413      	add	r3, r2
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	461a      	mov	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	fa42 f303 	asr.w	r3, r2, r3
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d104      	bne.n	800126c <LCD_Draw_Char+0x80>
 8001262:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <LCD_Draw_Char+0xd0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	2b0c      	cmp	r3, #12
 800126a:	d80e      	bhi.n	800128a <LCD_Draw_Char+0x9e>
      {
        // Background If want to overrite text under then add a set color here
      }
      else
      {
        LCD_Draw_Pixel(counter + Xpos, index + Ypos, CurrentTextColor);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	b29a      	uxth	r2, r3
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	4413      	add	r3, r2
 8001274:	b298      	uxth	r0, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	b29a      	uxth	r2, r3
 800127a:	88bb      	ldrh	r3, [r7, #4]
 800127c:	4413      	add	r3, r2
 800127e:	b29b      	uxth	r3, r3
 8001280:	4a10      	ldr	r2, [pc, #64]	@ (80012c4 <LCD_Draw_Char+0xd8>)
 8001282:	8812      	ldrh	r2, [r2, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff feb3 	bl	8000ff0 <LCD_Draw_Pixel>
    for (counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	3301      	adds	r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <LCD_Draw_Char+0xd0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	889b      	ldrh	r3, [r3, #4]
 8001296:	461a      	mov	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4293      	cmp	r3, r2
 800129c:	d3b8      	bcc.n	8001210 <LCD_Draw_Char+0x24>
  for (index = 0; index < LCD_Currentfonts->Height; index++)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <LCD_Draw_Char+0xd0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	88db      	ldrh	r3, [r3, #6]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d3ab      	bcc.n	800120a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000120 	.word	0x20000120
 80012c0:	aaaaaaab 	.word	0xaaaaaaab
 80012c4:	20000000 	.word	0x20000000

080012c8 <LCD_DisplayChar>:

// This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
 80012d2:	460b      	mov	r3, r1
 80012d4:	80bb      	strh	r3, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	3b20      	subs	r3, #32
 80012de:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80012e0:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <LCD_DisplayChar+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	4907      	ldr	r1, [pc, #28]	@ (8001308 <LCD_DisplayChar+0x40>)
 80012ea:	6809      	ldr	r1, [r1, #0]
 80012ec:	88c9      	ldrh	r1, [r1, #6]
 80012ee:	fb01 f303 	mul.w	r3, r1, r3
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	441a      	add	r2, r3
 80012f6:	88b9      	ldrh	r1, [r7, #4]
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff76 	bl	80011ec <LCD_Draw_Char>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000120 	.word	0x20000120

0800130c <LCD_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void LCD_Error_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001310:	b672      	cpsid	i
}
 8001312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <LCD_Error_Handler+0x8>

08001318 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  if (STMPE811_Init() != STMPE811_State_Ok)
 800131c:	f001 f85f 	bl	80023de <STMPE811_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b02      	cmp	r3, #2
 8001324:	d001      	beq.n	800132a <InitializeLCDTouch+0x12>
  {
    for (;;)
 8001326:	bf00      	nop
 8001328:	e7fd      	b.n	8001326 <InitializeLCDTouch+0xe>
      ; // Hang code due to error in initialzation
  }
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <getScheduledEvents>:
#include "Scheduler.h"

static uint32_t scheduledEvents = 0;

uint32_t getScheduledEvents()
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
    return scheduledEvents;
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <getScheduledEvents+0x14>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20025924 	.word	0x20025924

08001348 <addSchedulerEvent>:

void addSchedulerEvent(uint32_t event)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
    scheduledEvents |= event;
 8001350:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <addSchedulerEvent+0x20>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4313      	orrs	r3, r2
 8001358:	4a03      	ldr	r2, [pc, #12]	@ (8001368 <addSchedulerEvent+0x20>)
 800135a:	6013      	str	r3, [r2, #0]
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	20025924 	.word	0x20025924

0800136c <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
    scheduledEvents &= ~event;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	43da      	mvns	r2, r3
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <removeSchedulerEvent+0x24>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4013      	ands	r3, r2
 800137e:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <removeSchedulerEvent+0x24>)
 8001380:	6013      	str	r3, [r2, #0]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20025924 	.word	0x20025924

08001394 <createShape>:
            {0, 1, 0, 0},
            {0, 1, 0, 0},
            {0, 0, 0, 0}}}};

Shape createShape(uint8_t type, Board *board)
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b08e      	sub	sp, #56	@ 0x38
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	460b      	mov	r3, r1
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	72fb      	strb	r3, [r7, #11]
    Shape newShape;
    newShape.type = type;
 80013a2:	7afb      	ldrb	r3, [r7, #11]
 80013a4:	753b      	strb	r3, [r7, #20]
    newShape.orientation = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	757b      	strb	r3, [r7, #21]
    newShape.color = getColorForType(type);
 80013aa:	7afb      	ldrb	r3, [r7, #11]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f987 	bl	80016c0 <getColorForType>
 80013b2:	4603      	mov	r3, r0
 80013b4:	82fb      	strh	r3, [r7, #22]
    newShape.x = INITIAL_X_POSITION;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    newShape.y = INITIAL_Y_POSITION;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int y = 0; y < 4; y++)
 80013be:	2300      	movs	r3, #0
 80013c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80013c2:	e032      	b.n	800142a <createShape+0x96>
    {
        for (int x = 0; x < 4; x++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80013c8:	e029      	b.n	800141e <createShape+0x8a>
        {
            if (board->gameBoard[y][x] != 'b')
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	18ca      	adds	r2, r1, r3
 80013d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013da:	4413      	add	r3, r2
 80013dc:	3308      	adds	r3, #8
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b62      	cmp	r3, #98	@ 0x62
 80013e2:	d002      	beq.n	80013ea <createShape+0x56>
            {
                board->gameOver = true;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
            }
            newShape.blocks[y][x] = TETROMINOES[type][newShape.orientation][y][x];
 80013ea:	7afb      	ldrb	r3, [r7, #11]
 80013ec:	7d7a      	ldrb	r2, [r7, #21]
 80013ee:	4917      	ldr	r1, [pc, #92]	@ (800144c <createShape+0xb8>)
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009a      	lsls	r2, r3, #2
 80013f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	18ca      	adds	r2, r1, r3
 80013fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001400:	4413      	add	r3, r2
 8001402:	f993 1000 	ldrsb.w	r1, [r3]
 8001406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	3338      	adds	r3, #56	@ 0x38
 800140c:	19da      	adds	r2, r3, r7
 800140e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001410:	4413      	add	r3, r2
 8001412:	3b20      	subs	r3, #32
 8001414:	460a      	mov	r2, r1
 8001416:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++)
 8001418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800141a:	3301      	adds	r3, #1
 800141c:	633b      	str	r3, [r7, #48]	@ 0x30
 800141e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001420:	2b03      	cmp	r3, #3
 8001422:	ddd2      	ble.n	80013ca <createShape+0x36>
    for (int y = 0; y < 4; y++)
 8001424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001426:	3301      	adds	r3, #1
 8001428:	637b      	str	r3, [r7, #52]	@ 0x34
 800142a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800142c:	2b03      	cmp	r3, #3
 800142e:	ddc9      	ble.n	80013c4 <createShape+0x30>
        }
    }
    return newShape;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	461d      	mov	r5, r3
 8001434:	f107 0414 	add.w	r4, r7, #20
 8001438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001440:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	3738      	adds	r7, #56	@ 0x38
 8001448:	46bd      	mov	sp, r7
 800144a:	bdb0      	pop	{r4, r5, r7, pc}
 800144c:	08005db8 	.word	0x08005db8

08001450 <rotateShape>:

void rotateShape(Shape *shape, Board *board)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
    clearShape(shape, board);
 800145a:	6839      	ldr	r1, [r7, #0]
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f91f 	bl	80016a0 <clearShape>
    shape->orientation = (shape->orientation + 1) % 4;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	785b      	ldrb	r3, [r3, #1]
 8001466:	3301      	adds	r3, #1
 8001468:	425a      	negs	r2, r3
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	f002 0203 	and.w	r2, r2, #3
 8001472:	bf58      	it	pl
 8001474:	4253      	negpl	r3, r2
 8001476:	b2da      	uxtb	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	705a      	strb	r2, [r3, #1]
    for (int y = 0; y < 4; y++)
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	e026      	b.n	80014d0 <rotateShape+0x80>
    {
        for (int x = 0; x < 4; x++)
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	e01d      	b.n	80014c4 <rotateShape+0x74>
        {
            shape->blocks[y][x] = TETROMINOES[shape->type][shape->orientation][y][x];
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	785b      	ldrb	r3, [r3, #1]
 8001492:	461a      	mov	r2, r3
 8001494:	4914      	ldr	r1, [pc, #80]	@ (80014e8 <rotateShape+0x98>)
 8001496:	0083      	lsls	r3, r0, #2
 8001498:	4413      	add	r3, r2
 800149a:	009a      	lsls	r2, r3, #2
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	18ca      	adds	r2, r1, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4413      	add	r3, r2
 80014a8:	f993 1000 	ldrsb.w	r1, [r3]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	441a      	add	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4413      	add	r3, r2
 80014b8:	3304      	adds	r3, #4
 80014ba:	460a      	mov	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	3301      	adds	r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	ddde      	ble.n	8001488 <rotateShape+0x38>
    for (int y = 0; y < 4; y++)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	ddd5      	ble.n	8001482 <rotateShape+0x32>
        }
    }
    drawShape(shape, board);
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f847 	bl	800156c <drawShape>
}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	08005db8 	.word	0x08005db8

080014ec <fillShape>:

void fillShape(Shape *shape, Board *board)
{
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 4; y++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e02f      	b.n	800155c <fillShape+0x70>
    {
        for (int x = 0; x < 4; x++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	e026      	b.n	8001550 <fillShape+0x64>
        {
            if (shape->blocks[y][x])
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	441a      	add	r2, r3
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	4413      	add	r3, r2
 800150e:	3304      	adds	r3, #4
 8001510:	f993 3000 	ldrsb.w	r3, [r3]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d018      	beq.n	800154a <fillShape+0x5e>
            {
                board->gameBoard[shape->y + y][shape->x + x] = typeToChar(shape->type);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	7819      	ldrb	r1, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	699a      	ldr	r2, [r3, #24]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	18d4      	adds	r4, r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	18d5      	adds	r5, r2, r3
 800152c:	4608      	mov	r0, r1
 800152e:	f000 f8fd 	bl	800172c <typeToChar>
 8001532:	4603      	mov	r3, r0
 8001534:	4619      	mov	r1, r3
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	4623      	mov	r3, r4
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4423      	add	r3, r4
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	442b      	add	r3, r5
 8001544:	3308      	adds	r3, #8
 8001546:	460a      	mov	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++)
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	3301      	adds	r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b03      	cmp	r3, #3
 8001554:	ddd5      	ble.n	8001502 <fillShape+0x16>
    for (int y = 0; y < 4; y++)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3301      	adds	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2b03      	cmp	r3, #3
 8001560:	ddcc      	ble.n	80014fc <fillShape+0x10>
            }
        }
    }
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bdb0      	pop	{r4, r5, r7, pc}

0800156c <drawShape>:

void drawShape(Shape *shape, Board *board)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
    fillShape(shape, board);
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffb7 	bl	80014ec <fillShape>
    drawBoard(board);
 800157e:	6838      	ldr	r0, [r7, #0]
 8001580:	f7ff f878 	bl	8000674 <drawBoard>
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <displayShape>:


void displayShape(Shape *shape, Board *board)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af02      	add	r7, sp, #8
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
    fillShape(shape, board);
 8001596:	6839      	ldr	r1, [r7, #0]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ffa7 	bl	80014ec <fillShape>
    for (int y = 0; y < BOARD_HEIGHT; y++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e03a      	b.n	800161a <displayShape+0x8e>
    {
        for (int x = 0; x < BOARD_WIDTH; x++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	e031      	b.n	800160e <displayShape+0x82>
        {
            char cell = board->gameBoard[y][x];
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	18ca      	adds	r2, r1, r3
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4413      	add	r3, r2
 80015bc:	3308      	adds	r3, #8
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	73fb      	strb	r3, [r7, #15]
            if (cell != 'b')
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	2b62      	cmp	r3, #98	@ 0x62
 80015c6:	d01f      	beq.n	8001608 <displayShape+0x7c>
            {
                uint16_t drawX = X_DISPLAY_START + x * (2 * CELL_WIDTH); 
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3b14      	subs	r3, #20
 80015d8:	81bb      	strh	r3, [r7, #12]
                uint16_t drawY = Y_DISPLAY_START + y * (2 * CELL_HEIGHT);
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	3364      	adds	r3, #100	@ 0x64
 80015ea:	817b      	strh	r3, [r7, #10]
                uint16_t color = getColorFromChar(cell);
 80015ec:	7bfb      	ldrb	r3, [r7, #15]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ffe2 	bl	80005b8 <getColorFromChar>
 80015f4:	4603      	mov	r3, r0
 80015f6:	813b      	strh	r3, [r7, #8]
                LCD_Draw_Filled_Rectangle(drawX, drawY, 2 * CELL_WIDTH, 2 * CELL_HEIGHT, color);
 80015f8:	8979      	ldrh	r1, [r7, #10]
 80015fa:	89b8      	ldrh	r0, [r7, #12]
 80015fc:	893b      	ldrh	r3, [r7, #8]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	231e      	movs	r3, #30
 8001602:	221e      	movs	r2, #30
 8001604:	f7ff fd12 	bl	800102c <LCD_Draw_Filled_Rectangle>
        for (int x = 0; x < BOARD_WIDTH; x++)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	3301      	adds	r3, #1
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	2b09      	cmp	r3, #9
 8001612:	ddca      	ble.n	80015aa <displayShape+0x1e>
    for (int y = 0; y < BOARD_HEIGHT; y++)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b13      	cmp	r3, #19
 800161e:	ddc1      	ble.n	80015a4 <displayShape+0x18>
            }
        }
    }
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <unFillShape>:


void unFillShape(Shape *shape, Board *board)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 4; y++)
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e028      	b.n	800168c <unFillShape+0x62>
    {
        for (int x = 0; x < 4; x++)
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	e01f      	b.n	8001680 <unFillShape+0x56>
        {
            if (shape->blocks[y][x])
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	441a      	add	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4413      	add	r3, r2
 800164c:	3304      	adds	r3, #4
 800164e:	f993 3000 	ldrsb.w	r3, [r3]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d011      	beq.n	800167a <unFillShape+0x50>
            {
                board->gameBoard[shape->y + y][shape->x + x] = 'b';
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	441a      	add	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6959      	ldr	r1, [r3, #20]
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	4419      	add	r1, r3
 8001666:	6838      	ldr	r0, [r7, #0]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4403      	add	r3, r0
 8001672:	440b      	add	r3, r1
 8001674:	3308      	adds	r3, #8
 8001676:	2262      	movs	r2, #98	@ 0x62
 8001678:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < 4; x++)
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	3301      	adds	r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b03      	cmp	r3, #3
 8001684:	dddc      	ble.n	8001640 <unFillShape+0x16>
    for (int y = 0; y < 4; y++)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3301      	adds	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b03      	cmp	r3, #3
 8001690:	ddd3      	ble.n	800163a <unFillShape+0x10>
            }
        }
    }
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <clearShape>:

void clearShape(Shape *shape, Board *board)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
    unFillShape(shape, board);
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff ffbc 	bl	800162a <unFillShape>
    drawBoard(board);
 80016b2:	6838      	ldr	r0, [r7, #0]
 80016b4:	f7fe ffde 	bl	8000674 <drawBoard>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <getColorForType>:



uint16_t getColorForType(uint8_t type)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
    switch (type)
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b06      	cmp	r3, #6
 80016ce:	d825      	bhi.n	800171c <getColorForType+0x5c>
 80016d0:	a201      	add	r2, pc, #4	@ (adr r2, 80016d8 <getColorForType+0x18>)
 80016d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d6:	bf00      	nop
 80016d8:	080016f5 	.word	0x080016f5
 80016dc:	080016fb 	.word	0x080016fb
 80016e0:	08001701 	.word	0x08001701
 80016e4:	08001707 	.word	0x08001707
 80016e8:	0800170d 	.word	0x0800170d
 80016ec:	08001713 	.word	0x08001713
 80016f0:	08001717 	.word	0x08001717
    {
    case I_PIECE:
        return I_PIECE_COLOR;
 80016f4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80016f8:	e012      	b.n	8001720 <getColorForType+0x60>
    case O_PIECE:
        return O_PIECE_COLOR;
 80016fa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80016fe:	e00f      	b.n	8001720 <getColorForType+0x60>
    case T_PIECE:
        return T_PIECE_COLOR;
 8001700:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8001704:	e00c      	b.n	8001720 <getColorForType+0x60>
    case S_PIECE:
        return S_PIECE_COLOR;
 8001706:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800170a:	e009      	b.n	8001720 <getColorForType+0x60>
    case Z_PIECE:
        return Z_PIECE_COLOR;
 800170c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001710:	e006      	b.n	8001720 <getColorForType+0x60>
    case J_PIECE:
        return J_PIECE_COLOR;
 8001712:	231f      	movs	r3, #31
 8001714:	e004      	b.n	8001720 <getColorForType+0x60>
    case L_PIECE:
        return L_PIECE_COLOR;
 8001716:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800171a:	e001      	b.n	8001720 <getColorForType+0x60>
    default:
        return 0xffff;
 800171c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <typeToChar>:

char typeToChar(uint8_t type)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
    switch (type)
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	2b06      	cmp	r3, #6
 800173a:	d81f      	bhi.n	800177c <typeToChar+0x50>
 800173c:	a201      	add	r2, pc, #4	@ (adr r2, 8001744 <typeToChar+0x18>)
 800173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001742:	bf00      	nop
 8001744:	08001761 	.word	0x08001761
 8001748:	08001765 	.word	0x08001765
 800174c:	08001769 	.word	0x08001769
 8001750:	0800176d 	.word	0x0800176d
 8001754:	08001771 	.word	0x08001771
 8001758:	08001775 	.word	0x08001775
 800175c:	08001779 	.word	0x08001779
    {
    case I_PIECE:
        return 'i';
 8001760:	2369      	movs	r3, #105	@ 0x69
 8001762:	e00c      	b.n	800177e <typeToChar+0x52>
    case O_PIECE:
        return 'o';
 8001764:	236f      	movs	r3, #111	@ 0x6f
 8001766:	e00a      	b.n	800177e <typeToChar+0x52>
    case T_PIECE:
        return 't';
 8001768:	2374      	movs	r3, #116	@ 0x74
 800176a:	e008      	b.n	800177e <typeToChar+0x52>
    case S_PIECE:
        return 's';
 800176c:	2373      	movs	r3, #115	@ 0x73
 800176e:	e006      	b.n	800177e <typeToChar+0x52>
    case Z_PIECE:
        return 'z';
 8001770:	237a      	movs	r3, #122	@ 0x7a
 8001772:	e004      	b.n	800177e <typeToChar+0x52>
    case J_PIECE:
        return 'j';
 8001774:	236a      	movs	r3, #106	@ 0x6a
 8001776:	e002      	b.n	800177e <typeToChar+0x52>
    case L_PIECE:
        return 'l';
 8001778:	236c      	movs	r3, #108	@ 0x6c
 800177a:	e000      	b.n	800177e <typeToChar+0x52>
    default:
        return 'b';
 800177c:	2362      	movs	r3, #98	@ 0x62
    }
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop

0800178c <moveDown>:

void moveDown(Shape *shape, Board *board)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
    unFillShape(shape, board);
 8001796:	6839      	ldr	r1, [r7, #0]
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff46 	bl	800162a <unFillShape>
    shape->y += 1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
    drawShape(shape, board);
 80017a8:	6839      	ldr	r1, [r7, #0]
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fede 	bl	800156c <drawShape>
}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <moveLeft>:

void moveLeft(Shape *shape, Board *board)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    clearShape(shape, board);
 80017c2:	6839      	ldr	r1, [r7, #0]
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff6b 	bl	80016a0 <clearShape>
    shape->x -= 1;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	1e5a      	subs	r2, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	615a      	str	r2, [r3, #20]
    drawShape(shape, board);
 80017d4:	6839      	ldr	r1, [r7, #0]
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fec8 	bl	800156c <drawShape>
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <moveRight>:

void moveRight(Shape *shape, Board *board)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
    clearShape(shape, board);
 80017ee:	6839      	ldr	r1, [r7, #0]
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff55 	bl	80016a0 <clearShape>
    shape->x += 1;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	615a      	str	r2, [r3, #20]
    drawShape(shape, board);
 8001800:	6839      	ldr	r1, [r7, #0]
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff feb2 	bl	800156c <drawShape>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <canFall>:

bool canFall(Shape *shape, Board *board)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]

    unFillShape(shape, board);
 800181a:	6839      	ldr	r1, [r7, #0]
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff04 	bl	800162a <unFillShape>
    for (int y = 0; y < 4; y++)
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	e03c      	b.n	80018a2 <canFall+0x92>
    {
        for (int x = 0; x < 4; x++)
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	e033      	b.n	8001896 <canFall+0x86>
        {
            if (shape->blocks[y][x])
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	441a      	add	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	4413      	add	r3, r2
 800183a:	3304      	adds	r3, #4
 800183c:	f993 3000 	ldrsb.w	r3, [r3]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d025      	beq.n	8001890 <canFall+0x80>
            {
                if (shape->y + y + 1 >= BOARD_HEIGHT)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699a      	ldr	r2, [r3, #24]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	2b12      	cmp	r3, #18
 800184e:	dd05      	ble.n	800185c <canFall+0x4c>
                {
                    fillShape(shape, board);
 8001850:	6839      	ldr	r1, [r7, #0]
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff fe4a 	bl	80014ec <fillShape>
                    return false;
 8001858:	2300      	movs	r3, #0
 800185a:	e02a      	b.n	80018b2 <canFall+0xa2>
                }

                if (board->gameBoard[shape->y + y + 1][shape->x + x] != 'b')
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6959      	ldr	r1, [r3, #20]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4419      	add	r1, r3
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	4613      	mov	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4403      	add	r3, r0
 800187a:	440b      	add	r3, r1
 800187c:	3308      	adds	r3, #8
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b62      	cmp	r3, #98	@ 0x62
 8001882:	d005      	beq.n	8001890 <canFall+0x80>
                {
                    fillShape(shape, board);
 8001884:	6839      	ldr	r1, [r7, #0]
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fe30 	bl	80014ec <fillShape>
                    return false;
 800188c:	2300      	movs	r3, #0
 800188e:	e010      	b.n	80018b2 <canFall+0xa2>
        for (int x = 0; x < 4; x++)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	3301      	adds	r3, #1
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	2b03      	cmp	r3, #3
 800189a:	ddc8      	ble.n	800182e <canFall+0x1e>
    for (int y = 0; y < 4; y++)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	ddbf      	ble.n	8001828 <canFall+0x18>
                }
            }
        }
    }
    fillShape(shape, board);
 80018a8:	6839      	ldr	r1, [r7, #0]
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fe1e 	bl	80014ec <fillShape>
    return true;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <ili9341_Init>:
 * @brief  Power on the LCD.
 * @param  None
 * @retval None
 */
void ili9341_Init(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80018be:	f000 f9ff 	bl	8001cc0 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80018c2:	20ca      	movs	r0, #202	@ 0xca
 80018c4:	f000 f943 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);          // param 1
 80018c8:	20c3      	movs	r0, #195	@ 0xc3
 80018ca:	f000 f94d 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);          // param 2
 80018ce:	2008      	movs	r0, #8
 80018d0:	f000 f94a 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);          // param 3
 80018d4:	2050      	movs	r0, #80	@ 0x50
 80018d6:	f000 f947 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB);    // CF
 80018da:	20cf      	movs	r0, #207	@ 0xcf
 80018dc:	f000 f937 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);          // param 1
 80018e0:	2000      	movs	r0, #0
 80018e2:	f000 f941 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);          // param 2
 80018e6:	20c1      	movs	r0, #193	@ 0xc1
 80018e8:	f000 f93e 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);          // param 3
 80018ec:	2030      	movs	r0, #48	@ 0x30
 80018ee:	f000 f93b 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); // ED
 80018f2:	20ed      	movs	r0, #237	@ 0xed
 80018f4:	f000 f92b 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80018f8:	2064      	movs	r0, #100	@ 0x64
 80018fa:	f000 f935 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80018fe:	2003      	movs	r0, #3
 8001900:	f000 f932 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001904:	2012      	movs	r0, #18
 8001906:	f000 f92f 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 800190a:	2081      	movs	r0, #129	@ 0x81
 800190c:	f000 f92c 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001910:	20e8      	movs	r0, #232	@ 0xe8
 8001912:	f000 f91c 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001916:	2085      	movs	r0, #133	@ 0x85
 8001918:	f000 f926 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800191c:	2000      	movs	r0, #0
 800191e:	f000 f923 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001922:	2078      	movs	r0, #120	@ 0x78
 8001924:	f000 f920 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001928:	20cb      	movs	r0, #203	@ 0xcb
 800192a:	f000 f910 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800192e:	2039      	movs	r0, #57	@ 0x39
 8001930:	f000 f91a 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001934:	202c      	movs	r0, #44	@ 0x2c
 8001936:	f000 f917 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800193a:	2000      	movs	r0, #0
 800193c:	f000 f914 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001940:	2034      	movs	r0, #52	@ 0x34
 8001942:	f000 f911 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001946:	2002      	movs	r0, #2
 8001948:	f000 f90e 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800194c:	20f7      	movs	r0, #247	@ 0xf7
 800194e:	f000 f8fe 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001952:	2020      	movs	r0, #32
 8001954:	f000 f908 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001958:	20ea      	movs	r0, #234	@ 0xea
 800195a:	f000 f8f8 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f902 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001964:	2000      	movs	r0, #0
 8001966:	f000 f8ff 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 800196a:	20b1      	movs	r0, #177	@ 0xb1
 800196c:	f000 f8ef 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001970:	2000      	movs	r0, #0
 8001972:	f000 f8f9 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001976:	201b      	movs	r0, #27
 8001978:	f000 f8f6 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800197c:	20b6      	movs	r0, #182	@ 0xb6
 800197e:	f000 f8e6 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001982:	200a      	movs	r0, #10
 8001984:	f000 f8f0 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001988:	20a2      	movs	r0, #162	@ 0xa2
 800198a:	f000 f8ed 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800198e:	20c0      	movs	r0, #192	@ 0xc0
 8001990:	f000 f8dd 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001994:	2010      	movs	r0, #16
 8001996:	f000 f8e7 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 800199a:	20c1      	movs	r0, #193	@ 0xc1
 800199c:	f000 f8d7 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 80019a0:	2010      	movs	r0, #16
 80019a2:	f000 f8e1 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 80019a6:	20c5      	movs	r0, #197	@ 0xc5
 80019a8:	f000 f8d1 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 80019ac:	2045      	movs	r0, #69	@ 0x45
 80019ae:	f000 f8db 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80019b2:	2015      	movs	r0, #21
 80019b4:	f000 f8d8 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80019b8:	20c7      	movs	r0, #199	@ 0xc7
 80019ba:	f000 f8c8 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80019be:	2090      	movs	r0, #144	@ 0x90
 80019c0:	f000 f8d2 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80019c4:	2036      	movs	r0, #54	@ 0x36
 80019c6:	f000 f8c2 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80019ca:	20c8      	movs	r0, #200	@ 0xc8
 80019cc:	f000 f8cc 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80019d0:	20f2      	movs	r0, #242	@ 0xf2
 80019d2:	f000 f8bc 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80019d6:	2000      	movs	r0, #0
 80019d8:	f000 f8c6 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80019dc:	20b0      	movs	r0, #176	@ 0xb0
 80019de:	f000 f8b6 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80019e2:	20c2      	movs	r0, #194	@ 0xc2
 80019e4:	f000 f8c0 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80019e8:	20b6      	movs	r0, #182	@ 0xb6
 80019ea:	f000 f8b0 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80019ee:	200a      	movs	r0, #10
 80019f0:	f000 f8ba 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80019f4:	20a7      	movs	r0, #167	@ 0xa7
 80019f6:	f000 f8b7 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80019fa:	2027      	movs	r0, #39	@ 0x27
 80019fc:	f000 f8b4 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001a00:	2004      	movs	r0, #4
 8001a02:	f000 f8b1 	bl	8001b68 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001a06:	202a      	movs	r0, #42	@ 0x2a
 8001a08:	f000 f8a1 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 f8ab 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 f8a8 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f000 f8a5 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001a1e:	20ef      	movs	r0, #239	@ 0xef
 8001a20:	f000 f8a2 	bl	8001b68 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001a24:	202b      	movs	r0, #43	@ 0x2b
 8001a26:	f000 f892 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 f89c 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f000 f899 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f000 f896 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001a3c:	203f      	movs	r0, #63	@ 0x3f
 8001a3e:	f000 f893 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001a42:	20f6      	movs	r0, #246	@ 0xf6
 8001a44:	f000 f883 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001a48:	2001      	movs	r0, #1
 8001a4a:	f000 f88d 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f88a 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001a54:	2006      	movs	r0, #6
 8001a56:	f000 f887 	bl	8001b68 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001a5a:	202c      	movs	r0, #44	@ 0x2c
 8001a5c:	f000 f877 	bl	8001b4e <ili9341_Write_Reg>
  LCD_Delay(200);
 8001a60:	20c8      	movs	r0, #200	@ 0xc8
 8001a62:	f000 f9e9 	bl	8001e38 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001a66:	2026      	movs	r0, #38	@ 0x26
 8001a68:	f000 f871 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f000 f87b 	bl	8001b68 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001a72:	20e0      	movs	r0, #224	@ 0xe0
 8001a74:	f000 f86b 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001a78:	200f      	movs	r0, #15
 8001a7a:	f000 f875 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001a7e:	2029      	movs	r0, #41	@ 0x29
 8001a80:	f000 f872 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001a84:	2024      	movs	r0, #36	@ 0x24
 8001a86:	f000 f86f 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001a8a:	200c      	movs	r0, #12
 8001a8c:	f000 f86c 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001a90:	200e      	movs	r0, #14
 8001a92:	f000 f869 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001a96:	2009      	movs	r0, #9
 8001a98:	f000 f866 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001a9c:	204e      	movs	r0, #78	@ 0x4e
 8001a9e:	f000 f863 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001aa2:	2078      	movs	r0, #120	@ 0x78
 8001aa4:	f000 f860 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001aa8:	203c      	movs	r0, #60	@ 0x3c
 8001aaa:	f000 f85d 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001aae:	2009      	movs	r0, #9
 8001ab0:	f000 f85a 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001ab4:	2013      	movs	r0, #19
 8001ab6:	f000 f857 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001aba:	2005      	movs	r0, #5
 8001abc:	f000 f854 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001ac0:	2017      	movs	r0, #23
 8001ac2:	f000 f851 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001ac6:	2011      	movs	r0, #17
 8001ac8:	f000 f84e 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f000 f84b 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001ad2:	20e1      	movs	r0, #225	@ 0xe1
 8001ad4:	f000 f83b 	bl	8001b4e <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f000 f845 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001ade:	2016      	movs	r0, #22
 8001ae0:	f000 f842 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001ae4:	201b      	movs	r0, #27
 8001ae6:	f000 f83f 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001aea:	2004      	movs	r0, #4
 8001aec:	f000 f83c 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001af0:	2011      	movs	r0, #17
 8001af2:	f000 f839 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001af6:	2007      	movs	r0, #7
 8001af8:	f000 f836 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001afc:	2031      	movs	r0, #49	@ 0x31
 8001afe:	f000 f833 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001b02:	2033      	movs	r0, #51	@ 0x33
 8001b04:	f000 f830 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001b08:	2042      	movs	r0, #66	@ 0x42
 8001b0a:	f000 f82d 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001b0e:	2005      	movs	r0, #5
 8001b10:	f000 f82a 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001b14:	200c      	movs	r0, #12
 8001b16:	f000 f827 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001b1a:	200a      	movs	r0, #10
 8001b1c:	f000 f824 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001b20:	2028      	movs	r0, #40	@ 0x28
 8001b22:	f000 f821 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001b26:	202f      	movs	r0, #47	@ 0x2f
 8001b28:	f000 f81e 	bl	8001b68 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001b2c:	200f      	movs	r0, #15
 8001b2e:	f000 f81b 	bl	8001b68 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001b32:	2011      	movs	r0, #17
 8001b34:	f000 f80b 	bl	8001b4e <ili9341_Write_Reg>
  LCD_Delay(200);
 8001b38:	20c8      	movs	r0, #200	@ 0xc8
 8001b3a:	f000 f97d 	bl	8001e38 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001b3e:	2029      	movs	r0, #41	@ 0x29
 8001b40:	f000 f805 	bl	8001b4e <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001b44:	202c      	movs	r0, #44	@ 0x2c
 8001b46:	f000 f802 	bl	8001b4e <ili9341_Write_Reg>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <ili9341_Write_Reg>:
 * @brief  Writes  to the selected LCD register.
 * @param  LCD_Reg: address of the selected register.
 * @retval None
 */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 f94a 	bl	8001df4 <LCD_IO_WriteReg>
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <ili9341_Send_Data>:
 * @brief  Writes data to the selected LCD register.
 * @param  LCD_Reg: address of the selected register.
 * @retval None
 */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f91b 	bl	8001db0 <LCD_IO_WriteData>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <SPI_Init>:

/**
 * @brief  SPI Bus initialization
 */
static void SPI_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001b88:	4819      	ldr	r0, [pc, #100]	@ (8001bf0 <SPI_Init+0x6c>)
 8001b8a:	f003 ffe4 	bl	8005b56 <HAL_SPI_GetState>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d12b      	bne.n	8001bec <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001b94:	4b16      	ldr	r3, [pc, #88]	@ (8001bf0 <SPI_Init+0x6c>)
 8001b96:	4a17      	ldr	r2, [pc, #92]	@ (8001bf4 <SPI_Init+0x70>)
 8001b98:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <SPI_Init+0x6c>)
 8001b9c:	2218      	movs	r2, #24
 8001b9e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <SPI_Init+0x6c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <SPI_Init+0x6c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bac:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <SPI_Init+0x6c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <SPI_Init+0x6c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <SPI_Init+0x6c>)
 8001bba:	2207      	movs	r2, #7
 8001bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <SPI_Init+0x6c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <SPI_Init+0x6c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <SPI_Init+0x6c>)
 8001bcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bd0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <SPI_Init+0x6c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001bd8:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <SPI_Init+0x6c>)
 8001bda:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bde:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001be0:	4803      	ldr	r0, [pc, #12]	@ (8001bf0 <SPI_Init+0x6c>)
 8001be2:	f000 f833 	bl	8001c4c <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001be6:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <SPI_Init+0x6c>)
 8001be8:	f003 fdc0 	bl	800576c <HAL_SPI_Init>
  }
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20025928 	.word	0x20025928
 8001bf4:	40015000 	.word	0x40015000

08001bf8 <SPI_Write>:
/**
 * @brief  Writes a byte to device.
 * @param  Value: value to be written
 */
static void SPI_Write(uint16_t Value)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *)&Value, 1, SpiTimeout);
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <SPI_Write+0x34>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1db9      	adds	r1, r7, #6
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4808      	ldr	r0, [pc, #32]	@ (8001c30 <SPI_Write+0x38>)
 8001c10:	f003 fe5d 	bl	80058ce <HAL_SPI_Transmit>
 8001c14:	4603      	mov	r3, r0
 8001c16:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001c1e:	f000 f809 	bl	8001c34 <SPI_Error>
  }
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000014 	.word	0x20000014
 8001c30:	20025928 	.word	0x20025928

08001c34 <SPI_Error>:

/**
 * @brief  SPI error treatment function.
 */
static void SPI_Error(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <SPI_Error+0x14>)
 8001c3a:	f003 fe20 	bl	800587e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001c3e:	f7ff ffa1 	bl	8001b84 <SPI_Init>
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20025928 	.word	0x20025928

08001c4c <SPI_MspInit>:
/**
 * @brief  SPI MSP Init.
 * @param  hspi: SPI handle
 */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	@ 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <SPI_MspInit+0x6c>)
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5c:	4a16      	ldr	r2, [pc, #88]	@ (8001cb8 <SPI_MspInit+0x6c>)
 8001c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c62:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <SPI_MspInit+0x6c>)
 8001c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <SPI_MspInit+0x6c>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c78:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb8 <SPI_MspInit+0x6c>)
 8001c7a:	f043 0320 	orr.w	r3, r3, #32
 8001c7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c80:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <SPI_MspInit+0x6c>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c84:	f003 0320 	and.w	r3, r3, #32
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001c8c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <SPI_MspInit+0x70>)
 8001caa:	f001 f8ff 	bl	8002eac <HAL_GPIO_Init>
}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	@ 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40021400 	.word	0x40021400

08001cc0 <LCD_IO_Init>:

/**
 * @brief  Configures the LCD_SPI interface.
 */
void LCD_IO_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8001cc6:	4b36      	ldr	r3, [pc, #216]	@ (8001da0 <LCD_IO_Init+0xe0>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d164      	bne.n	8001d98 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001cce:	4b34      	ldr	r3, [pc, #208]	@ (8001da0 <LCD_IO_Init+0xe0>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <LCD_IO_Init+0xe4>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cdc:	4a31      	ldr	r2, [pc, #196]	@ (8001da4 <LCD_IO_Init+0xe4>)
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <LCD_IO_Init+0xe4>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin = LCD_WRX_PIN;
 8001cf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cf4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	4619      	mov	r1, r3
 8001d08:	4827      	ldr	r0, [pc, #156]	@ (8001da8 <LCD_IO_Init+0xe8>)
 8001d0a:	f001 f8cf 	bl	8002eac <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <LCD_IO_Init+0xe4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	4a23      	ldr	r2, [pc, #140]	@ (8001da4 <LCD_IO_Init+0xe4>)
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1e:	4b21      	ldr	r3, [pc, #132]	@ (8001da4 <LCD_IO_Init+0xe4>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin = LCD_RDX_PIN;
 8001d2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	4619      	mov	r1, r3
 8001d42:	4819      	ldr	r0, [pc, #100]	@ (8001da8 <LCD_IO_Init+0xe8>)
 8001d44:	f001 f8b2 	bl	8002eac <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001d48:	2300      	movs	r3, #0
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <LCD_IO_Init+0xe4>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d50:	4a14      	ldr	r2, [pc, #80]	@ (8001da4 <LCD_IO_Init+0xe4>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <LCD_IO_Init+0xe4>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin = LCD_NCS_PIN;
 8001d64:	2304      	movs	r3, #4
 8001d66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001d70:	2302      	movs	r3, #2
 8001d72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480c      	ldr	r0, [pc, #48]	@ (8001dac <LCD_IO_Init+0xec>)
 8001d7c:	f001 f896 	bl	8002eac <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001d80:	2200      	movs	r2, #0
 8001d82:	2104      	movs	r1, #4
 8001d84:	4809      	ldr	r0, [pc, #36]	@ (8001dac <LCD_IO_Init+0xec>)
 8001d86:	f001 fb49 	bl	800341c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	4807      	ldr	r0, [pc, #28]	@ (8001dac <LCD_IO_Init+0xec>)
 8001d90:	f001 fb44 	bl	800341c <HAL_GPIO_WritePin>

    SPI_Init();
 8001d94:	f7ff fef6 	bl	8001b84 <SPI_Init>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3720      	adds	r7, #32
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20025980 	.word	0x20025980
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40020800 	.word	0x40020800

08001db0 <LCD_IO_WriteData>:

/**
 * @brief  Writes register value.
 */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dc0:	480a      	ldr	r0, [pc, #40]	@ (8001dec <LCD_IO_WriteData+0x3c>)
 8001dc2:	f001 fb2b 	bl	800341c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2104      	movs	r1, #4
 8001dca:	4809      	ldr	r0, [pc, #36]	@ (8001df0 <LCD_IO_WriteData+0x40>)
 8001dcc:	f001 fb26 	bl	800341c <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff ff10 	bl	8001bf8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001dd8:	2201      	movs	r2, #1
 8001dda:	2104      	movs	r1, #4
 8001ddc:	4804      	ldr	r0, [pc, #16]	@ (8001df0 <LCD_IO_WriteData+0x40>)
 8001dde:	f001 fb1d 	bl	800341c <HAL_GPIO_WritePin>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40020c00 	.word	0x40020c00
 8001df0:	40020800 	.word	0x40020800

08001df4 <LCD_IO_WriteReg>:

/**
 * @brief  Writes register address.
 */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e04:	480a      	ldr	r0, [pc, #40]	@ (8001e30 <LCD_IO_WriteReg+0x3c>)
 8001e06:	f001 fb09 	bl	800341c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	4809      	ldr	r0, [pc, #36]	@ (8001e34 <LCD_IO_WriteReg+0x40>)
 8001e10:	f001 fb04 	bl	800341c <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff feed 	bl	8001bf8 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e1e:	2201      	movs	r2, #1
 8001e20:	2104      	movs	r1, #4
 8001e22:	4804      	ldr	r0, [pc, #16]	@ (8001e34 <LCD_IO_WriteReg+0x40>)
 8001e24:	f001 fafa 	bl	800341c <HAL_GPIO_WritePin>
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40020c00 	.word	0x40020c00
 8001e34:	40020800 	.word	0x40020800

08001e38 <LCD_Delay>:
/**
 * @brief  Wait for loop in ms.
 * @param  Delay in ms.
 */
void LCD_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fecb 	bl	8002bdc <HAL_Delay>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e52:	f000 fe51 	bl	8002af8 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 8001e56:	f000 f80b 	bl	8001e70 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 8001e5a:	f7fe fb3f 	bl	80004dc <ApplicationInit>
  gameLoop();
 8001e5e:	f7fe fcad 	bl	80007bc <gameLoop>
  // LCD_Visual_Demo();

  HAL_Delay(5000);
 8001e62:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001e66:	f000 feb9 	bl	8002bdc <HAL_Delay>

  // DO NOT CALL THIS FUNCTION WHEN INTERRUPT MODE IS SELECTED IN THE COMPILE SWITCH IN stmpe811.h
  // Un-comment the below function after setting COMPILE_TOUCH to 1 in stmpe811.h
  // LCD_Touch_Polling_Demo(); // This function Will not return

  while (1)
 8001e6a:	bf00      	nop
 8001e6c:	e7fd      	b.n	8001e6a <main+0x1c>
	...

08001e70 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b092      	sub	sp, #72	@ 0x48
 8001e74:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001eec <SystemClockOverride+0x7c>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001eec <SystemClockOverride+0x7c>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <SystemClockOverride+0x7c>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e92:	2301      	movs	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e9a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ea0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ea4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001eaa:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001eb4:	2307      	movs	r3, #7
 8001eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001eb8:	1d3b      	adds	r3, r7, #4
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 fd92 	bl	80049e4 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ecc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ed0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ed2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed6:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001ed8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001edc:	2105      	movs	r1, #5
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f002 fff8 	bl	8004ed4 <HAL_RCC_ClockConfig>
}
 8001ee4:	bf00      	nop
 8001ee6:	3748      	adds	r7, #72	@ 0x48
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800

08001ef0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <Error_Handler+0x8>

08001efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <HAL_MspInit+0x4c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f48 <HAL_MspInit+0x4c>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f12:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_MspInit+0x4c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <HAL_MspInit+0x4c>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	4a08      	ldr	r2, [pc, #32]	@ (8001f48 <HAL_MspInit+0x4c>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_MspInit+0x4c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f3a:	2007      	movs	r0, #7
 8001f3c:	f000 ff66 	bl	8002e0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800

08001f4c <HAL_I2C_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	@ 0x28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if (hi2c->Instance == I2C3)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a29      	ldr	r2, [pc, #164]	@ (8002010 <HAL_I2C_MspInit+0xc4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d14b      	bne.n	8002006 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	4a27      	ldr	r2, [pc, #156]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f78:	f043 0304 	orr.w	r3, r3, #4
 8001f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f7e:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	4b21      	ldr	r3, [pc, #132]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	4a20      	ldr	r2, [pc, #128]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001fa6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fac:	2312      	movs	r3, #18
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4815      	ldr	r0, [pc, #84]	@ (8002018 <HAL_I2C_MspInit+0xcc>)
 8001fc4:	f000 ff72 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fce:	2312      	movs	r3, #18
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001fda:	2304      	movs	r3, #4
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480d      	ldr	r0, [pc, #52]	@ (800201c <HAL_I2C_MspInit+0xd0>)
 8001fe6:	f000 ff61 	bl	8002eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001ff4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_I2C_MspInit+0xc8>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	@ 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40005c00 	.word	0x40005c00
 8002014:	40023800 	.word	0x40023800
 8002018:	40020800 	.word	0x40020800
 800201c:	40020000 	.word	0x40020000

08002020 <HAL_LTDC_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hltdc: LTDC handle pointer
 * @retval None
 */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b09a      	sub	sp, #104	@ 0x68
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002038:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800203c:	2230      	movs	r2, #48	@ 0x30
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f003 fe73 	bl	8005d2c <memset>
  if (hltdc->Instance == LTDC)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a81      	ldr	r2, [pc, #516]	@ (8002250 <HAL_LTDC_MspInit+0x230>)
 800204c:	4293      	cmp	r3, r2
 800204e:	f040 80fa 	bne.w	8002246 <HAL_LTDC_MspInit+0x226>

    /* USER CODE END LTDC_MspInit 0 */

    /** Initializes the peripherals clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002052:	2308      	movs	r3, #8
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8002056:	2331      	movs	r3, #49	@ 0x31
 8002058:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800205a:	2302      	movs	r3, #2
 800205c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800205e:	2300      	movs	r3, #0
 8002060:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002066:	4618      	mov	r0, r3
 8002068:	f003 f940 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002072:	f7ff ff3d 	bl	8001ef0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	623b      	str	r3, [r7, #32]
 800207a:	4b76      	ldr	r3, [pc, #472]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	4a75      	ldr	r2, [pc, #468]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002080:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002084:	6453      	str	r3, [r2, #68]	@ 0x44
 8002086:	4b73      	ldr	r3, [pc, #460]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800208e:	623b      	str	r3, [r7, #32]
 8002090:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	4b6f      	ldr	r3, [pc, #444]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a6e      	ldr	r2, [pc, #440]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 800209c:	f043 0320 	orr.w	r3, r3, #32
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b6c      	ldr	r3, [pc, #432]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	4b68      	ldr	r3, [pc, #416]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4a67      	ldr	r2, [pc, #412]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020b8:	f043 0301 	orr.w	r3, r3, #1
 80020bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020be:	4b65      	ldr	r3, [pc, #404]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	61bb      	str	r3, [r7, #24]
 80020c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	4b61      	ldr	r3, [pc, #388]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4a60      	ldr	r2, [pc, #384]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4b5e      	ldr	r3, [pc, #376]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	4b5a      	ldr	r3, [pc, #360]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a59      	ldr	r2, [pc, #356]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b57      	ldr	r3, [pc, #348]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b53      	ldr	r3, [pc, #332]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	4a52      	ldr	r2, [pc, #328]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	6313      	str	r3, [r2, #48]	@ 0x30
 8002112:	4b50      	ldr	r3, [pc, #320]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b4c      	ldr	r3, [pc, #304]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a4b      	ldr	r2, [pc, #300]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <HAL_LTDC_MspInit+0x234>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800213a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800213e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800214c:	230e      	movs	r3, #14
 800214e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002154:	4619      	mov	r1, r3
 8002156:	4840      	ldr	r0, [pc, #256]	@ (8002258 <HAL_LTDC_MspInit+0x238>)
 8002158:	f000 fea8 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin | VSYNC_Pin | G2_Pin | R4_Pin | R5_Pin;
 800215c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002160:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800216e:	230e      	movs	r3, #14
 8002170:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002172:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002176:	4619      	mov	r1, r3
 8002178:	4838      	ldr	r0, [pc, #224]	@ (800225c <HAL_LTDC_MspInit+0x23c>)
 800217a:	f000 fe97 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin | R6_Pin;
 800217e:	2303      	movs	r3, #3
 8002180:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800218e:	2309      	movs	r3, #9
 8002190:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002192:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002196:	4619      	mov	r1, r3
 8002198:	4831      	ldr	r0, [pc, #196]	@ (8002260 <HAL_LTDC_MspInit+0x240>)
 800219a:	f000 fe87 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin | G5_Pin | B6_Pin | B7_Pin;
 800219e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80021a2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021b0:	230e      	movs	r3, #14
 80021b2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021b8:	4619      	mov	r1, r3
 80021ba:	4829      	ldr	r0, [pc, #164]	@ (8002260 <HAL_LTDC_MspInit+0x240>)
 80021bc:	f000 fe76 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin | DOTCLK_Pin | B3_Pin;
 80021c0:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80021c4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021d2:	230e      	movs	r3, #14
 80021d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021da:	4619      	mov	r1, r3
 80021dc:	4821      	ldr	r0, [pc, #132]	@ (8002264 <HAL_LTDC_MspInit+0x244>)
 80021de:	f000 fe65 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin | G6_Pin | R2_Pin;
 80021e2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80021e6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f0:	2300      	movs	r3, #0
 80021f2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021f4:	230e      	movs	r3, #14
 80021f6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021fc:	4619      	mov	r1, r3
 80021fe:	481a      	ldr	r0, [pc, #104]	@ (8002268 <HAL_LTDC_MspInit+0x248>)
 8002200:	f000 fe54 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin | B2_Pin;
 8002204:	2348      	movs	r3, #72	@ 0x48
 8002206:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002214:	230e      	movs	r3, #14
 8002216:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002218:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800221c:	4619      	mov	r1, r3
 800221e:	4813      	ldr	r0, [pc, #76]	@ (800226c <HAL_LTDC_MspInit+0x24c>)
 8002220:	f000 fe44 	bl	8002eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin | B4_Pin;
 8002224:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002228:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002236:	2309      	movs	r3, #9
 8002238:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800223a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800223e:	4619      	mov	r1, r3
 8002240:	4808      	ldr	r0, [pc, #32]	@ (8002264 <HAL_LTDC_MspInit+0x244>)
 8002242:	f000 fe33 	bl	8002eac <HAL_GPIO_Init>

    /* USER CODE BEGIN LTDC_MspInit 1 */

    /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002246:	bf00      	nop
 8002248:	3768      	adds	r7, #104	@ 0x68
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40016800 	.word	0x40016800
 8002254:	40023800 	.word	0x40023800
 8002258:	40021400 	.word	0x40021400
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400
 8002264:	40021800 	.word	0x40021800
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00

08002270 <HAL_RNG_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hrng: RNG handle pointer
 * @retval None
 */
void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if (hrng->Instance == RNG)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0b      	ldr	r2, [pc, #44]	@ (80022ac <HAL_RNG_MspInit+0x3c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10d      	bne.n	800229e <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <HAL_RNG_MspInit+0x40>)
 8002288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228a:	4a09      	ldr	r2, [pc, #36]	@ (80022b0 <HAL_RNG_MspInit+0x40>)
 800228c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002290:	6353      	str	r3, [r2, #52]	@ 0x34
 8002292:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <HAL_RNG_MspInit+0x40>)
 8002294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN RNG_MspInit 1 */

    /* USER CODE END RNG_MspInit 1 */
  }
}
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	50060800 	.word	0x50060800
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_SPI_MspInit>:
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	@ 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if (hspi->Instance == SPI5)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a19      	ldr	r2, [pc, #100]	@ (8002338 <HAL_SPI_MspInit+0x84>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d12c      	bne.n	8002330 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <HAL_SPI_MspInit+0x88>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a17      	ldr	r2, [pc, #92]	@ (800233c <HAL_SPI_MspInit+0x88>)
 80022e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_SPI_MspInit+0x88>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b11      	ldr	r3, [pc, #68]	@ (800233c <HAL_SPI_MspInit+0x88>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4a10      	ldr	r2, [pc, #64]	@ (800233c <HAL_SPI_MspInit+0x88>)
 80022fc:	f043 0320 	orr.w	r3, r3, #32
 8002300:	6313      	str	r3, [r2, #48]	@ 0x30
 8002302:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <HAL_SPI_MspInit+0x88>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin | SPI5_MISO_Pin | SPI5_MOSI_Pin;
 800230e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002320:	2305      	movs	r3, #5
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	4805      	ldr	r0, [pc, #20]	@ (8002340 <HAL_SPI_MspInit+0x8c>)
 800232c:	f000 fdbe 	bl	8002eac <HAL_GPIO_Init>

    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002330:	bf00      	nop
 8002332:	3728      	adds	r7, #40	@ 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40015000 	.word	0x40015000
 800233c:	40023800 	.word	0x40023800
 8002340:	40021400 	.word	0x40021400

08002344 <HAL_SPI_MspDeInit>:
 * This function freeze the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI5)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a08      	ldr	r2, [pc, #32]	@ (8002374 <HAL_SPI_MspDeInit+0x30>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d10a      	bne.n	800236c <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI5_MspDeInit 0 */

    /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002356:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <HAL_SPI_MspDeInit+0x34>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <HAL_SPI_MspDeInit+0x34>)
 800235c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002360:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin | SPI5_MISO_Pin | SPI5_MOSI_Pin);
 8002362:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002366:	4805      	ldr	r0, [pc, #20]	@ (800237c <HAL_SPI_MspDeInit+0x38>)
 8002368:	f000 ff4c 	bl	8003204 <HAL_GPIO_DeInit>

    /* USER CODE BEGIN SPI5_MspDeInit 1 */

    /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40015000 	.word	0x40015000
 8002378:	40023800 	.word	0x40023800
 800237c:	40021400 	.word	0x40021400

08002380 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <NMI_Handler+0x4>

08002388 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <HardFault_Handler+0x4>

08002390 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <MemManage_Handler+0x4>

08002398 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <BusFault_Handler+0x4>

080023a0 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a4:	bf00      	nop
 80023a6:	e7fd      	b.n	80023a4 <UsageFault_Handler+0x4>

080023a8 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d6:	f000 fbe1 	bl	8002b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}

080023de <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    // stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports
    I2C3_MspInit();
 80023e4:	f000 f9ce 	bl	8002784 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80023e8:	f000 f98e 	bl	8002708 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80023ec:	2202      	movs	r2, #2
 80023ee:	2103      	movs	r1, #3
 80023f0:	2082      	movs	r0, #130	@ 0x82
 80023f2:	f000 fa1b 	bl	800282c <I2C3_Write>
    HAL_Delay(5);
 80023f6:	2005      	movs	r0, #5
 80023f8:	f000 fbf0 	bl	8002bdc <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2103      	movs	r1, #3
 8002400:	2082      	movs	r0, #130	@ 0x82
 8002402:	f000 fa13 	bl	800282c <I2C3_Write>
    HAL_Delay(2);
 8002406:	2002      	movs	r0, #2
 8002408:	f000 fbe8 	bl	8002bdc <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t *)&dataRecieved, TWOBYTE); // Need to change
 800240c:	1cba      	adds	r2, r7, #2
 800240e:	2302      	movs	r3, #2
 8002410:	2100      	movs	r1, #0
 8002412:	2082      	movs	r0, #130	@ 0x82
 8002414:	f000 fa5a 	bl	80028cc <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002418:	887b      	ldrh	r3, [r7, #2]
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 800241e:	887b      	ldrh	r3, [r7, #2]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29a      	uxth	r2, r3
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	4313      	orrs	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE)
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	f640 0211 	movw	r2, #2065	@ 0x811
 8002430:	4293      	cmp	r3, r2
 8002432:	d001      	beq.n	8002438 <STMPE811_Init+0x5a>
    {
        return STMPE811_State_Error;
 8002434:	2303      	movs	r3, #3
 8002436:	e075      	b.n	8002524 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002438:	2202      	movs	r2, #2
 800243a:	2103      	movs	r1, #3
 800243c:	2082      	movs	r0, #130	@ 0x82
 800243e:	f000 f9f5 	bl	800282c <I2C3_Write>
    HAL_Delay(5);
 8002442:	2005      	movs	r0, #5
 8002444:	f000 fbca 	bl	8002bdc <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002448:	2200      	movs	r2, #0
 800244a:	2103      	movs	r1, #3
 800244c:	2082      	movs	r0, #130	@ 0x82
 800244e:	f000 f9ed 	bl	800282c <I2C3_Write>
    HAL_Delay(2);
 8002452:	2002      	movs	r0, #2
 8002454:	f000 fbc2 	bl	8002bdc <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002458:	2004      	movs	r0, #4
 800245a:	f000 f867 	bl	800252c <STMPE811_Read>
 800245e:	4603      	mov	r3, r0
 8002460:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002462:	797b      	ldrb	r3, [r7, #5]
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 800246a:	797b      	ldrb	r3, [r7, #5]
 800246c:	461a      	mov	r2, r3
 800246e:	2104      	movs	r1, #4
 8002470:	2082      	movs	r0, #130	@ 0x82
 8002472:	f000 f9db 	bl	800282c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002476:	2004      	movs	r0, #4
 8002478:	f000 f858 	bl	800252c <STMPE811_Read>
 800247c:	4603      	mov	r3, r0
 800247e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002480:	797b      	ldrb	r3, [r7, #5]
 8002482:	f023 0302 	bic.w	r3, r3, #2
 8002486:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002488:	797b      	ldrb	r3, [r7, #5]
 800248a:	461a      	mov	r2, r3
 800248c:	2104      	movs	r1, #4
 800248e:	2082      	movs	r0, #130	@ 0x82
 8002490:	f000 f9cc 	bl	800282c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002494:	2249      	movs	r2, #73	@ 0x49
 8002496:	2120      	movs	r1, #32
 8002498:	2082      	movs	r0, #130	@ 0x82
 800249a:	f000 f9c7 	bl	800282c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 800249e:	2002      	movs	r0, #2
 80024a0:	f000 fb9c 	bl	8002bdc <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80024a4:	2201      	movs	r2, #1
 80024a6:	2121      	movs	r1, #33	@ 0x21
 80024a8:	2082      	movs	r0, #130	@ 0x82
 80024aa:	f000 f9bf 	bl	800282c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80024ae:	2017      	movs	r0, #23
 80024b0:	f000 f83c 	bl	800252c <STMPE811_Read>
 80024b4:	4603      	mov	r3, r0
 80024b6:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80024b8:	797b      	ldrb	r3, [r7, #5]
 80024ba:	f043 031e 	orr.w	r3, r3, #30
 80024be:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 80024c0:	797b      	ldrb	r3, [r7, #5]
 80024c2:	461a      	mov	r2, r3
 80024c4:	2117      	movs	r1, #23
 80024c6:	2082      	movs	r0, #130	@ 0x82
 80024c8:	f000 f9b0 	bl	800282c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 80024cc:	229a      	movs	r2, #154	@ 0x9a
 80024ce:	2141      	movs	r1, #65	@ 0x41
 80024d0:	2082      	movs	r0, #130	@ 0x82
 80024d2:	f000 f9ab 	bl	800282c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 80024d6:	2201      	movs	r2, #1
 80024d8:	214a      	movs	r1, #74	@ 0x4a
 80024da:	2082      	movs	r0, #130	@ 0x82
 80024dc:	f000 f9a6 	bl	800282c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80024e0:	2201      	movs	r2, #1
 80024e2:	214b      	movs	r1, #75	@ 0x4b
 80024e4:	2082      	movs	r0, #130	@ 0x82
 80024e6:	f000 f9a1 	bl	800282c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80024ea:	2200      	movs	r2, #0
 80024ec:	214b      	movs	r1, #75	@ 0x4b
 80024ee:	2082      	movs	r0, #130	@ 0x82
 80024f0:	f000 f99c 	bl	800282c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 80024f4:	2201      	movs	r2, #1
 80024f6:	2156      	movs	r1, #86	@ 0x56
 80024f8:	2082      	movs	r0, #130	@ 0x82
 80024fa:	f000 f997 	bl	800282c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 80024fe:	2201      	movs	r2, #1
 8002500:	2158      	movs	r1, #88	@ 0x58
 8002502:	2082      	movs	r0, #130	@ 0x82
 8002504:	f000 f992 	bl	800282c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002508:	2203      	movs	r2, #3
 800250a:	2140      	movs	r1, #64	@ 0x40
 800250c:	2082      	movs	r0, #130	@ 0x82
 800250e:	f000 f98d 	bl	800282c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002512:	22ff      	movs	r2, #255	@ 0xff
 8002514:	210b      	movs	r1, #11
 8002516:	2082      	movs	r0, #130	@ 0x82
 8002518:	f000 f988 	bl	800282c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);

#endif // COMPILE_TOUCH_INTERRUPT_SUPPORT

    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800251c:	20c8      	movs	r0, #200	@ 0xc8
 800251e:	f000 fb5d 	bl	8002bdc <HAL_Delay>

    return STMPE811_State_Ok;
 8002522:	2302      	movs	r3, #2
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002536:	f107 020f 	add.w	r2, r7, #15
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4619      	mov	r1, r3
 800253e:	2082      	movs	r0, #130	@ 0x82
 8002540:	f000 f99e 	bl	8002880 <I2C3_Read>

    return readData;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata) // TM Function
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	791a      	ldrb	r2, [r3, #4]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800255e:	2040      	movs	r0, #64	@ 0x40
 8002560:	f7ff ffe4 	bl	800252c <STMPE811_Read>
 8002564:	4603      	mov	r3, r0
 8002566:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0)
 8002568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256c:	2b00      	cmp	r3, #0
 800256e:	db0e      	blt.n	800258e <STMPE811_ReadTouch+0x40>
    {
        // Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	711a      	strb	r2, [r3, #4]

        // Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002576:	2201      	movs	r2, #1
 8002578:	214b      	movs	r1, #75	@ 0x4b
 800257a:	2082      	movs	r0, #130	@ 0x82
 800257c:	f000 f956 	bl	800282c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002580:	2200      	movs	r2, #0
 8002582:	214b      	movs	r1, #75	@ 0x4b
 8002584:	2082      	movs	r0, #130	@ 0x82
 8002586:	f000 f951 	bl	800282c <I2C3_Write>

        return STMPE811_State_Released;
 800258a:	2301      	movs	r3, #1
 800258c:	e0a7      	b.n	80026de <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    // TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    // Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	799b      	ldrb	r3, [r3, #6]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d117      	bne.n	80025c6 <STMPE811_ReadTouch+0x78>
    {
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	881b      	ldrh	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f000 f9b8 	bl	8002910 <TM_STMPE811_ReadX>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	885b      	ldrh	r3, [r3, #2]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fa0b 	bl	80029cc <TM_STMPE811_ReadY>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80025bc:	3301      	adds	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	805a      	strh	r2, [r3, #2]
 80025c4:	e048      	b.n	8002658 <STMPE811_ReadTouch+0x10a>
    }
    else if (structdata->orientation == STMPE811_Orientation_Portrait_2)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	799b      	ldrb	r3, [r3, #6]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d112      	bne.n	80025f4 <STMPE811_ReadTouch+0xa6>
    {
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f99c 	bl	8002910 <TM_STMPE811_ReadX>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	885b      	ldrh	r3, [r3, #2]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 f9f1 	bl	80029cc <TM_STMPE811_ReadY>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	805a      	strh	r2, [r3, #2]
 80025f2:	e031      	b.n	8002658 <STMPE811_ReadTouch+0x10a>
    }
    else if (structdata->orientation == STMPE811_Orientation_Landscape_1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	799b      	ldrb	r3, [r3, #6]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d115      	bne.n	8002628 <STMPE811_ReadTouch+0xda>
    {
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	885b      	ldrh	r3, [r3, #2]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 f985 	bl	8002910 <TM_STMPE811_ReadX>
 8002606:	4603      	mov	r3, r0
 8002608:	461a      	mov	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f9da 	bl	80029cc <TM_STMPE811_ReadY>
 8002618:	4603      	mov	r3, r0
 800261a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800261e:	3301      	adds	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	801a      	strh	r2, [r3, #0]
 8002626:	e017      	b.n	8002658 <STMPE811_ReadTouch+0x10a>
    }
    else if (structdata->orientation == STMPE811_Orientation_Landscape_2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	799b      	ldrb	r3, [r3, #6]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d113      	bne.n	8002658 <STMPE811_ReadTouch+0x10a>
    {
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f000 f96b 	bl	8002910 <TM_STMPE811_ReadX>
 800263a:	4603      	mov	r3, r0
 800263c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002640:	b29a      	uxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f9be 	bl	80029cc <TM_STMPE811_ReadY>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	801a      	strh	r2, [r3, #0]
    }

    // Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002658:	2201      	movs	r2, #1
 800265a:	214b      	movs	r1, #75	@ 0x4b
 800265c:	2082      	movs	r0, #130	@ 0x82
 800265e:	f000 f8e5 	bl	800282c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002662:	2200      	movs	r2, #0
 8002664:	214b      	movs	r1, #75	@ 0x4b
 8002666:	2082      	movs	r0, #130	@ 0x82
 8002668:	f000 f8e0 	bl	800282c <I2C3_Write>

    // Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	799b      	ldrb	r3, [r3, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <STMPE811_ReadTouch+0x12e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	799b      	ldrb	r3, [r3, #6]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d115      	bne.n	80026a8 <STMPE811_ReadTouch+0x15a>
    {
        // Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d027      	beq.n	80026d4 <STMPE811_ReadTouch+0x186>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	2bee      	cmp	r3, #238	@ 0xee
 800268a:	d823      	bhi.n	80026d4 <STMPE811_ReadTouch+0x186>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	885b      	ldrh	r3, [r3, #2]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01f      	beq.n	80026d4 <STMPE811_ReadTouch+0x186>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	885b      	ldrh	r3, [r3, #2]
 8002698:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 800269c:	d81a      	bhi.n	80026d4 <STMPE811_ReadTouch+0x186>
        {
            structdata->pressed = STMPE811_State_Pressed;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e01a      	b.n	80026de <STMPE811_ReadTouch+0x190>
        }
    }
    else
    {
        // Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d012      	beq.n	80026d6 <STMPE811_ReadTouch+0x188>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80026b8:	d80d      	bhi.n	80026d6 <STMPE811_ReadTouch+0x188>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	885b      	ldrh	r3, [r3, #2]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <STMPE811_ReadTouch+0x188>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	885b      	ldrh	r3, [r3, #2]
 80026c6:	2bee      	cmp	r3, #238	@ 0xee
 80026c8:	d805      	bhi.n	80026d6 <STMPE811_ReadTouch+0x188>
        {
            structdata->pressed = STMPE811_State_Pressed;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80026d0:	2300      	movs	r3, #0
 80026d2:	e004      	b.n	80026de <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319)
 80026d4:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80026dc:	2301      	movs	r3, #1
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <verifyHAL_I2C_IS_OKAY>:

#endif

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY()
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 80026ec:	4b05      	ldr	r3, [pc, #20]	@ (8002704 <verifyHAL_I2C_IS_OKAY+0x1c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <verifyHAL_I2C_IS_OKAY+0xc>
            ;
    }
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	200259d8 	.word	0x200259d8

08002708 <I2C3_Init>:

static void I2C3_Init()
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0

    __HAL_RCC_I2C3_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <I2C3_Init+0x6c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	4a17      	ldr	r2, [pc, #92]	@ (8002774 <I2C3_Init+0x6c>)
 8002718:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800271c:	6413      	str	r3, [r2, #64]	@ 0x40
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <I2C3_Init+0x6c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800272a:	4b13      	ldr	r3, [pc, #76]	@ (8002778 <I2C3_Init+0x70>)
 800272c:	4a13      	ldr	r2, [pc, #76]	@ (800277c <I2C3_Init+0x74>)
 800272e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002730:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <I2C3_Init+0x70>)
 8002732:	4a13      	ldr	r2, [pc, #76]	@ (8002780 <I2C3_Init+0x78>)
 8002734:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002736:	4b10      	ldr	r3, [pc, #64]	@ (8002778 <I2C3_Init+0x70>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 800273c:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <I2C3_Init+0x70>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002742:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <I2C3_Init+0x70>)
 8002744:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002748:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800274a:	4b0b      	ldr	r3, [pc, #44]	@ (8002778 <I2C3_Init+0x70>)
 800274c:	2200      	movs	r2, #0
 800274e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002750:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <I2C3_Init+0x70>)
 8002752:	2200      	movs	r2, #0
 8002754:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode?

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002756:	4808      	ldr	r0, [pc, #32]	@ (8002778 <I2C3_Init+0x70>)
 8002758:	f000 fe7a 	bl	8003450 <HAL_I2C_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <I2C3_Init+0x62>
    {
        for (;;)
 8002766:	bf00      	nop
 8002768:	e7fd      	b.n	8002766 <I2C3_Init+0x5e>
            ; // Catch error
    }
    return;
 800276a:	bf00      	nop
}
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	20025984 	.word	0x20025984
 800277c:	40005c00 	.word	0x40005c00
 8002780:	000186a0 	.word	0x000186a0

08002784 <I2C3_MspInit>:

// GPIO Initializations
static void I2C3_MspInit(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	4b20      	ldr	r3, [pc, #128]	@ (8002820 <I2C3_MspInit+0x9c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002820 <I2C3_MspInit+0x9c>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002820 <I2C3_MspInit+0x9c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <I2C3_MspInit+0x9c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	4a18      	ldr	r2, [pc, #96]	@ (8002820 <I2C3_MspInit+0x9c>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c6:	4b16      	ldr	r3, [pc, #88]	@ (8002820 <I2C3_MspInit+0x9c>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80027d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d8:	2312      	movs	r3, #18
 80027da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027e4:	2304      	movs	r3, #4
 80027e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	4619      	mov	r1, r3
 80027ee:	480d      	ldr	r0, [pc, #52]	@ (8002824 <I2C3_MspInit+0xa0>)
 80027f0:	f000 fb5c 	bl	8002eac <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80027f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fa:	2312      	movs	r3, #18
 80027fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002806:	2304      	movs	r3, #4
 8002808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800280a:	f107 030c 	add.w	r3, r7, #12
 800280e:	4619      	mov	r1, r3
 8002810:	4805      	ldr	r0, [pc, #20]	@ (8002828 <I2C3_MspInit+0xa4>)
 8002812:	f000 fb4b 	bl	8002eac <HAL_GPIO_Init>
}
 8002816:	bf00      	nop
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40020800 	.word	0x40020800
 8002828:	40020000 	.word	0x40020000

0800282c <I2C3_Write>:

// This function should only be used for single BYTE transfers
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af04      	add	r7, sp, #16
 8002832:	4603      	mov	r3, r0
 8002834:	80fb      	strh	r3, [r7, #6]
 8002836:	460b      	mov	r3, r1
 8002838:	717b      	strb	r3, [r7, #5]
 800283a:	4613      	mov	r3, r2
 800283c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800283e:	793b      	ldrb	r3, [r7, #4]
 8002840:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call?
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002842:	797b      	ldrb	r3, [r7, #5]
 8002844:	b29a      	uxth	r2, r3
 8002846:	88f9      	ldrh	r1, [r7, #6]
 8002848:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <I2C3_Write+0x48>)
 800284a:	9302      	str	r3, [sp, #8]
 800284c:	2301      	movs	r3, #1
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	f107 030f 	add.w	r3, r7, #15
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2301      	movs	r3, #1
 8002858:	4807      	ldr	r0, [pc, #28]	@ (8002878 <I2C3_Write+0x4c>)
 800285a:	f000 ff3d 	bl	80036d8 <HAL_I2C_Mem_Write>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	4b06      	ldr	r3, [pc, #24]	@ (800287c <I2C3_Write+0x50>)
 8002864:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002866:	f7ff ff3f 	bl	80026e8 <verifyHAL_I2C_IS_OKAY>
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	0003d090 	.word	0x0003d090
 8002878:	20025984 	.word	0x20025984
 800287c:	200259d8 	.word	0x200259d8

08002880 <I2C3_Read>:

// This function should only be used for single BYTE transfers
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t *rxData)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af04      	add	r7, sp, #16
 8002886:	4603      	mov	r3, r0
 8002888:	603a      	str	r2, [r7, #0]
 800288a:	71fb      	strb	r3, [r7, #7]
 800288c:	460b      	mov	r3, r1
 800288e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	b299      	uxth	r1, r3
 8002894:	79bb      	ldrb	r3, [r7, #6]
 8002896:	b29a      	uxth	r2, r3
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <I2C3_Read+0x40>)
 800289a:	9302      	str	r3, [sp, #8]
 800289c:	2301      	movs	r3, #1
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2301      	movs	r3, #1
 80028a6:	4807      	ldr	r0, [pc, #28]	@ (80028c4 <I2C3_Read+0x44>)
 80028a8:	f001 f810 	bl	80038cc <HAL_I2C_Mem_Read>
 80028ac:	4603      	mov	r3, r0
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <I2C3_Read+0x48>)
 80028b2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80028b4:	f7ff ff18 	bl	80026e8 <verifyHAL_I2C_IS_OKAY>
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	0003d090 	.word	0x0003d090
 80028c4:	20025984 	.word	0x20025984
 80028c8:	200259d8 	.word	0x200259d8

080028cc <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t *rxData, uint16_t numOfBytes)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af04      	add	r7, sp, #16
 80028d2:	603a      	str	r2, [r7, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
 80028da:	460b      	mov	r3, r1
 80028dc:	71bb      	strb	r3, [r7, #6]
 80028de:	4613      	mov	r3, r2
 80028e0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	b299      	uxth	r1, r3
 80028e6:	79bb      	ldrb	r3, [r7, #6]
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <I2C3_MulitByteRead+0x3c>)
 80028ec:	9302      	str	r3, [sp, #8]
 80028ee:	88bb      	ldrh	r3, [r7, #4]
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2301      	movs	r3, #1
 80028f8:	4804      	ldr	r0, [pc, #16]	@ (800290c <I2C3_MulitByteRead+0x40>)
 80028fa:	f000 ffe7 	bl	80038cc <HAL_I2C_Mem_Read>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	0003d090 	.word	0x0003d090
 800290c:	20025984 	.word	0x20025984

08002910 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x)
{ // TM FUNCTION
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800291a:	204d      	movs	r0, #77	@ 0x4d
 800291c:	f7ff fe06 	bl	800252c <STMPE811_Read>
 8002920:	4603      	mov	r3, r0
 8002922:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002924:	204e      	movs	r0, #78	@ 0x4e
 8002926:	f7ff fe01 	bl	800252c <STMPE811_Read>
 800292a:	4603      	mov	r3, r0
 800292c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800292e:	7a7b      	ldrb	r3, [r7, #9]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	b21a      	sxth	r2, r3
 8002934:	7a3b      	ldrb	r3, [r7, #8]
 8002936:	b21b      	sxth	r3, r3
 8002938:	4313      	orrs	r3, r2
 800293a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000)
 800293c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002940:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002944:	4293      	cmp	r3, r2
 8002946:	dc06      	bgt.n	8002956 <TM_STMPE811_ReadX+0x46>
    {
        val = 3900 - val;
 8002948:	89fb      	ldrh	r3, [r7, #14]
 800294a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800294e:	330c      	adds	r3, #12
 8002950:	b29b      	uxth	r3, r3
 8002952:	81fb      	strh	r3, [r7, #14]
 8002954:	e005      	b.n	8002962 <TM_STMPE811_ReadX+0x52>
    }
    else
    {
        val = 3800 - val;
 8002956:	89fb      	ldrh	r3, [r7, #14]
 8002958:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800295c:	3308      	adds	r3, #8
 800295e:	b29b      	uxth	r3, r3
 8002960:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002962:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002966:	4a18      	ldr	r2, [pc, #96]	@ (80029c8 <TM_STMPE811_ReadX+0xb8>)
 8002968:	fb82 1203 	smull	r1, r2, r2, r3
 800296c:	441a      	add	r2, r3
 800296e:	10d2      	asrs	r2, r2, #3
 8002970:	17db      	asrs	r3, r3, #31
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	81fb      	strh	r3, [r7, #14]

    if (val > 239)
 8002976:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800297a:	2bef      	cmp	r3, #239	@ 0xef
 800297c:	dd02      	ble.n	8002984 <TM_STMPE811_ReadX+0x74>
    {
        val = 239;
 800297e:	23ef      	movs	r3, #239	@ 0xef
 8002980:	81fb      	strh	r3, [r7, #14]
 8002982:	e005      	b.n	8002990 <TM_STMPE811_ReadX+0x80>
    }
    else if (val < 0)
 8002984:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002988:	2b00      	cmp	r3, #0
 800298a:	da01      	bge.n	8002990 <TM_STMPE811_ReadX+0x80>
    {
        val = 0;
 800298c:	2300      	movs	r3, #0
 800298e:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002990:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	429a      	cmp	r2, r3
 8002998:	dd05      	ble.n	80029a6 <TM_STMPE811_ReadX+0x96>
 800299a:	89fa      	ldrh	r2, [r7, #14]
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	b21b      	sxth	r3, r3
 80029a4:	e004      	b.n	80029b0 <TM_STMPE811_ReadX+0xa0>
 80029a6:	89fb      	ldrh	r3, [r7, #14]
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	81bb      	strh	r3, [r7, #12]
    if (dx > 4)
 80029b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	dd01      	ble.n	80029be <TM_STMPE811_ReadX+0xae>
    {
        return val;
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	e000      	b.n	80029c0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80029be:	88fb      	ldrh	r3, [r7, #6]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	88888889 	.word	0x88888889

080029cc <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y)
{ // TM FUNCTION
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80029d6:	204f      	movs	r0, #79	@ 0x4f
 80029d8:	f7ff fda8 	bl	800252c <STMPE811_Read>
 80029dc:	4603      	mov	r3, r0
 80029de:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 80029e0:	2050      	movs	r0, #80	@ 0x50
 80029e2:	f7ff fda3 	bl	800252c <STMPE811_Read>
 80029e6:	4603      	mov	r3, r0
 80029e8:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80029ea:	7a7b      	ldrb	r3, [r7, #9]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	b21a      	sxth	r2, r3
 80029f0:	7a3b      	ldrb	r3, [r7, #8]
 80029f2:	b21b      	sxth	r3, r3
 80029f4:	4313      	orrs	r3, r2
 80029f6:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 80029f8:	89fb      	ldrh	r3, [r7, #14]
 80029fa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002a02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a06:	4a19      	ldr	r2, [pc, #100]	@ (8002a6c <TM_STMPE811_ReadY+0xa0>)
 8002a08:	fb82 1203 	smull	r1, r2, r2, r3
 8002a0c:	1052      	asrs	r2, r2, #1
 8002a0e:	17db      	asrs	r3, r3, #31
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	81fb      	strh	r3, [r7, #14]

    if (val <= 0)
 8002a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	dc02      	bgt.n	8002a22 <TM_STMPE811_ReadY+0x56>
    {
        val = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	81fb      	strh	r3, [r7, #14]
 8002a20:	e007      	b.n	8002a32 <TM_STMPE811_ReadY+0x66>
    }
    else if (val >= 320)
 8002a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a26:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002a2a:	db02      	blt.n	8002a32 <TM_STMPE811_ReadY+0x66>
    {
        val = 319;
 8002a2c:	f240 133f 	movw	r3, #319	@ 0x13f
 8002a30:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002a32:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	dd05      	ble.n	8002a48 <TM_STMPE811_ReadY+0x7c>
 8002a3c:	89fa      	ldrh	r2, [r7, #14]
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	b21b      	sxth	r3, r3
 8002a46:	e004      	b.n	8002a52 <TM_STMPE811_ReadY+0x86>
 8002a48:	89fb      	ldrh	r3, [r7, #14]
 8002a4a:	88fa      	ldrh	r2, [r7, #6]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	81bb      	strh	r3, [r7, #12]
    if (dy > 4)
 8002a54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	dd01      	ble.n	8002a60 <TM_STMPE811_ReadY+0x94>
    {
        return val;
 8002a5c:	89fb      	ldrh	r3, [r7, #14]
 8002a5e:	e000      	b.n	8002a62 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002a60:	88fb      	ldrh	r3, [r7, #6]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2e8ba2e9 	.word	0x2e8ba2e9

08002a70 <initialise_monitor_handles>:
char *__env[1] = {0};
char **environ = __env;

/* Functions */
void initialise_monitor_handles()
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002a84:	4b06      	ldr	r3, [pc, #24]	@ (8002aa0 <SystemInit+0x20>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8a:	4a05      	ldr	r2, [pc, #20]	@ (8002aa0 <SystemInit+0x20>)
 8002a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                                 /* USER_VECT_TAB_ADDRESS */
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002adc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aa8:	f7ff ffea 	bl	8002a80 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002aac:	480c      	ldr	r0, [pc, #48]	@ (8002ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aae:	490d      	ldr	r1, [pc, #52]	@ (8002ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab4:	e002      	b.n	8002abc <LoopCopyDataInit>

08002ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aba:	3304      	adds	r3, #4

08002abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac0:	d3f9      	bcc.n	8002ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8002aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8002af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac8:	e001      	b.n	8002ace <LoopFillZerobss>

08002aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002acc:	3204      	adds	r2, #4

08002ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad0:	d3fb      	bcc.n	8002aca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ad2:	f003 f933 	bl	8005d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ad6:	f7ff f9ba 	bl	8001e4e <main>
  bx  lr    
 8002ada:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002adc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ae4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002ae8:	08007a70 	.word	0x08007a70
  ldr r2, =_sbss
 8002aec:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002af0:	200259e0 	.word	0x200259e0

08002af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af4:	e7fe      	b.n	8002af4 <ADC_IRQHandler>
	...

08002af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002afc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b38 <HAL_Init+0x40>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	@ (8002b38 <HAL_Init+0x40>)
 8002b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b08:	4b0b      	ldr	r3, [pc, #44]	@ (8002b38 <HAL_Init+0x40>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <HAL_Init+0x40>)
 8002b0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b14:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <HAL_Init+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a07      	ldr	r2, [pc, #28]	@ (8002b38 <HAL_Init+0x40>)
 8002b1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b20:	2003      	movs	r0, #3
 8002b22:	f000 f973 	bl	8002e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f000 f808 	bl	8002b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b2c:	f7ff f9e6 	bl	8001efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023c00 	.word	0x40023c00

08002b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b44:	4b12      	ldr	r3, [pc, #72]	@ (8002b90 <HAL_InitTick+0x54>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b12      	ldr	r3, [pc, #72]	@ (8002b94 <HAL_InitTick+0x58>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f999 	bl	8002e92 <HAL_SYSTICK_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00e      	b.n	8002b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b0f      	cmp	r3, #15
 8002b6e:	d80a      	bhi.n	8002b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b70:	2200      	movs	r2, #0
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b78:	f000 f953 	bl	8002e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b7c:	4a06      	ldr	r2, [pc, #24]	@ (8002b98 <HAL_InitTick+0x5c>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000018 	.word	0x20000018
 8002b94:	20000020 	.word	0x20000020
 8002b98:	2000001c 	.word	0x2000001c

08002b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_IncTick+0x20>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <HAL_IncTick+0x24>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	4a04      	ldr	r2, [pc, #16]	@ (8002bc0 <HAL_IncTick+0x24>)
 8002bae:	6013      	str	r3, [r2, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000020 	.word	0x20000020
 8002bc0:	200259dc 	.word	0x200259dc

08002bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	@ (8002bd8 <HAL_GetTick+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	200259dc 	.word	0x200259dc

08002bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff ffee 	bl	8002bc4 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bf4:	d005      	beq.n	8002c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8002c20 <HAL_Delay+0x44>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c02:	bf00      	nop
 8002c04:	f7ff ffde 	bl	8002bc4 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d8f7      	bhi.n	8002c04 <HAL_Delay+0x28>
  {
  }
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000020 	.word	0x20000020

08002c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c34:	4b0c      	ldr	r3, [pc, #48]	@ (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c3a:	68ba      	ldr	r2, [r7, #8]
 8002c3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c40:	4013      	ands	r3, r2
 8002c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c56:	4a04      	ldr	r2, [pc, #16]	@ (8002c68 <__NVIC_SetPriorityGrouping+0x44>)
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	60d3      	str	r3, [r2, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c70:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <__NVIC_GetPriorityGrouping+0x18>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	0a1b      	lsrs	r3, r3, #8
 8002c76:	f003 0307 	and.w	r3, r3, #7
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	db0b      	blt.n	8002cb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	f003 021f 	and.w	r2, r3, #31
 8002ca0:	4907      	ldr	r1, [pc, #28]	@ (8002cc0 <__NVIC_EnableIRQ+0x38>)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	2001      	movs	r0, #1
 8002caa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db12      	blt.n	8002cfc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	490a      	ldr	r1, [pc, #40]	@ (8002d08 <__NVIC_DisableIRQ+0x44>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	3320      	adds	r3, #32
 8002cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cf0:	f3bf 8f4f 	dsb	sy
}
 8002cf4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cf6:	f3bf 8f6f 	isb	sy
}
 8002cfa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db0a      	blt.n	8002d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	490c      	ldr	r1, [pc, #48]	@ (8002d58 <__NVIC_SetPriority+0x4c>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d34:	e00a      	b.n	8002d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4908      	ldr	r1, [pc, #32]	@ (8002d5c <__NVIC_SetPriority+0x50>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	3b04      	subs	r3, #4
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	761a      	strb	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	@ 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	bf28      	it	cs
 8002d7e:	2304      	movcs	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d902      	bls.n	8002d90 <NVIC_EncodePriority+0x30>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3b03      	subs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <NVIC_EncodePriority+0x32>
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	4313      	orrs	r3, r2
         );
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	@ 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd8:	d301      	bcc.n	8002dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00f      	b.n	8002dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dde:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <SysTick_Config+0x40>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de6:	210f      	movs	r1, #15
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002dec:	f7ff ff8e 	bl	8002d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <SysTick_Config+0x40>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df6:	4b04      	ldr	r3, [pc, #16]	@ (8002e08 <SysTick_Config+0x40>)
 8002df8:	2207      	movs	r2, #7
 8002dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	e000e010 	.word	0xe000e010

08002e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ff05 	bl	8002c24 <__NVIC_SetPriorityGrouping>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e34:	f7ff ff1a 	bl	8002c6c <__NVIC_GetPriorityGrouping>
 8002e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	6978      	ldr	r0, [r7, #20]
 8002e40:	f7ff ff8e 	bl	8002d60 <NVIC_EncodePriority>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff5d 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff0d 	bl	8002c88 <__NVIC_EnableIRQ>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff1d 	bl	8002cc4 <__NVIC_DisableIRQ>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b082      	sub	sp, #8
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f7ff ff94 	bl	8002dc8 <SysTick_Config>
 8002ea0:	4603      	mov	r3, r0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b089      	sub	sp, #36	@ 0x24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	e177      	b.n	80031b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ec8:	2201      	movs	r2, #1
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	697a      	ldr	r2, [r7, #20]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	f040 8166 	bne.w	80031b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d005      	beq.n	8002efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d130      	bne.n	8002f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	2203      	movs	r2, #3
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f34:	2201      	movs	r2, #1
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 0201 	and.w	r2, r3, #1
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d017      	beq.n	8002f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	2203      	movs	r2, #3
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4013      	ands	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d123      	bne.n	8002ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	08da      	lsrs	r2, r3, #3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3208      	adds	r2, #8
 8002fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	220f      	movs	r2, #15
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	08da      	lsrs	r2, r3, #3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3208      	adds	r2, #8
 8002fea:	69b9      	ldr	r1, [r7, #24]
 8002fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0203 	and.w	r2, r3, #3
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80c0 	beq.w	80031b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b66      	ldr	r3, [pc, #408]	@ (80031d0 <HAL_GPIO_Init+0x324>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303a:	4a65      	ldr	r2, [pc, #404]	@ (80031d0 <HAL_GPIO_Init+0x324>)
 800303c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003040:	6453      	str	r3, [r2, #68]	@ 0x44
 8003042:	4b63      	ldr	r3, [pc, #396]	@ (80031d0 <HAL_GPIO_Init+0x324>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800304e:	4a61      	ldr	r2, [pc, #388]	@ (80031d4 <HAL_GPIO_Init+0x328>)
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	220f      	movs	r2, #15
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a58      	ldr	r2, [pc, #352]	@ (80031d8 <HAL_GPIO_Init+0x32c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d037      	beq.n	80030ea <HAL_GPIO_Init+0x23e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a57      	ldr	r2, [pc, #348]	@ (80031dc <HAL_GPIO_Init+0x330>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d031      	beq.n	80030e6 <HAL_GPIO_Init+0x23a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a56      	ldr	r2, [pc, #344]	@ (80031e0 <HAL_GPIO_Init+0x334>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d02b      	beq.n	80030e2 <HAL_GPIO_Init+0x236>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a55      	ldr	r2, [pc, #340]	@ (80031e4 <HAL_GPIO_Init+0x338>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d025      	beq.n	80030de <HAL_GPIO_Init+0x232>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a54      	ldr	r2, [pc, #336]	@ (80031e8 <HAL_GPIO_Init+0x33c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d01f      	beq.n	80030da <HAL_GPIO_Init+0x22e>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a53      	ldr	r2, [pc, #332]	@ (80031ec <HAL_GPIO_Init+0x340>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d019      	beq.n	80030d6 <HAL_GPIO_Init+0x22a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a52      	ldr	r2, [pc, #328]	@ (80031f0 <HAL_GPIO_Init+0x344>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <HAL_GPIO_Init+0x226>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a51      	ldr	r2, [pc, #324]	@ (80031f4 <HAL_GPIO_Init+0x348>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00d      	beq.n	80030ce <HAL_GPIO_Init+0x222>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a50      	ldr	r2, [pc, #320]	@ (80031f8 <HAL_GPIO_Init+0x34c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d007      	beq.n	80030ca <HAL_GPIO_Init+0x21e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a4f      	ldr	r2, [pc, #316]	@ (80031fc <HAL_GPIO_Init+0x350>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d101      	bne.n	80030c6 <HAL_GPIO_Init+0x21a>
 80030c2:	2309      	movs	r3, #9
 80030c4:	e012      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030c6:	230a      	movs	r3, #10
 80030c8:	e010      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030ca:	2308      	movs	r3, #8
 80030cc:	e00e      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030ce:	2307      	movs	r3, #7
 80030d0:	e00c      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030d2:	2306      	movs	r3, #6
 80030d4:	e00a      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030d6:	2305      	movs	r3, #5
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030da:	2304      	movs	r3, #4
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x240>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	@ (80031d4 <HAL_GPIO_Init+0x328>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800310a:	4b3d      	ldr	r3, [pc, #244]	@ (8003200 <HAL_GPIO_Init+0x354>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800312e:	4a34      	ldr	r2, [pc, #208]	@ (8003200 <HAL_GPIO_Init+0x354>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003134:	4b32      	ldr	r3, [pc, #200]	@ (8003200 <HAL_GPIO_Init+0x354>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003158:	4a29      	ldr	r2, [pc, #164]	@ (8003200 <HAL_GPIO_Init+0x354>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800315e:	4b28      	ldr	r3, [pc, #160]	@ (8003200 <HAL_GPIO_Init+0x354>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003182:	4a1f      	ldr	r2, [pc, #124]	@ (8003200 <HAL_GPIO_Init+0x354>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003188:	4b1d      	ldr	r3, [pc, #116]	@ (8003200 <HAL_GPIO_Init+0x354>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ac:	4a14      	ldr	r2, [pc, #80]	@ (8003200 <HAL_GPIO_Init+0x354>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f ae84 	bls.w	8002ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	@ 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40021400 	.word	0x40021400
 80031f0:	40021800 	.word	0x40021800
 80031f4:	40021c00 	.word	0x40021c00
 80031f8:	40022000 	.word	0x40022000
 80031fc:	40022400 	.word	0x40022400
 8003200:	40013c00 	.word	0x40013c00

08003204 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321a:	2300      	movs	r3, #0
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e0d9      	b.n	80033d4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003220:	2201      	movs	r2, #1
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	429a      	cmp	r2, r3
 8003238:	f040 80c9 	bne.w	80033ce <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800323c:	4a6b      	ldr	r2, [pc, #428]	@ (80033ec <HAL_GPIO_DeInit+0x1e8>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003248:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220f      	movs	r2, #15
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	4013      	ands	r3, r2
 800325c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a63      	ldr	r2, [pc, #396]	@ (80033f0 <HAL_GPIO_DeInit+0x1ec>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d037      	beq.n	80032d6 <HAL_GPIO_DeInit+0xd2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a62      	ldr	r2, [pc, #392]	@ (80033f4 <HAL_GPIO_DeInit+0x1f0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d031      	beq.n	80032d2 <HAL_GPIO_DeInit+0xce>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a61      	ldr	r2, [pc, #388]	@ (80033f8 <HAL_GPIO_DeInit+0x1f4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d02b      	beq.n	80032ce <HAL_GPIO_DeInit+0xca>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a60      	ldr	r2, [pc, #384]	@ (80033fc <HAL_GPIO_DeInit+0x1f8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d025      	beq.n	80032ca <HAL_GPIO_DeInit+0xc6>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a5f      	ldr	r2, [pc, #380]	@ (8003400 <HAL_GPIO_DeInit+0x1fc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01f      	beq.n	80032c6 <HAL_GPIO_DeInit+0xc2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a5e      	ldr	r2, [pc, #376]	@ (8003404 <HAL_GPIO_DeInit+0x200>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d019      	beq.n	80032c2 <HAL_GPIO_DeInit+0xbe>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a5d      	ldr	r2, [pc, #372]	@ (8003408 <HAL_GPIO_DeInit+0x204>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d013      	beq.n	80032be <HAL_GPIO_DeInit+0xba>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a5c      	ldr	r2, [pc, #368]	@ (800340c <HAL_GPIO_DeInit+0x208>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00d      	beq.n	80032ba <HAL_GPIO_DeInit+0xb6>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a5b      	ldr	r2, [pc, #364]	@ (8003410 <HAL_GPIO_DeInit+0x20c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d007      	beq.n	80032b6 <HAL_GPIO_DeInit+0xb2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003414 <HAL_GPIO_DeInit+0x210>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d101      	bne.n	80032b2 <HAL_GPIO_DeInit+0xae>
 80032ae:	2309      	movs	r3, #9
 80032b0:	e012      	b.n	80032d8 <HAL_GPIO_DeInit+0xd4>
 80032b2:	230a      	movs	r3, #10
 80032b4:	e010      	b.n	80032d8 <HAL_GPIO_DeInit+0xd4>
 80032b6:	2308      	movs	r3, #8
 80032b8:	e00e      	b.n	80032d8 <HAL_GPIO_DeInit+0xd4>
 80032ba:	2307      	movs	r3, #7
 80032bc:	e00c      	b.n	80032d8 <HAL_GPIO_DeInit+0xd4>
 80032be:	2306      	movs	r3, #6
 80032c0:	e00a      	b.n	80032d8 <HAL_GPIO_DeInit+0xd4>
 80032c2:	2305      	movs	r3, #5
 80032c4:	e008      	b.n	80032d8 <HAL_GPIO_DeInit+0xd4>
 80032c6:	2304      	movs	r3, #4
 80032c8:	e006      	b.n	80032d8 <HAL_GPIO_DeInit+0xd4>
 80032ca:	2303      	movs	r3, #3
 80032cc:	e004      	b.n	80032d8 <HAL_GPIO_DeInit+0xd4>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e002      	b.n	80032d8 <HAL_GPIO_DeInit+0xd4>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <HAL_GPIO_DeInit+0xd4>
 80032d6:	2300      	movs	r3, #0
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	f002 0203 	and.w	r2, r2, #3
 80032de:	0092      	lsls	r2, r2, #2
 80032e0:	4093      	lsls	r3, r2
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d132      	bne.n	800334e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80032e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003418 <HAL_GPIO_DeInit+0x214>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	4949      	ldr	r1, [pc, #292]	@ (8003418 <HAL_GPIO_DeInit+0x214>)
 80032f2:	4013      	ands	r3, r2
 80032f4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80032f6:	4b48      	ldr	r3, [pc, #288]	@ (8003418 <HAL_GPIO_DeInit+0x214>)
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	4946      	ldr	r1, [pc, #280]	@ (8003418 <HAL_GPIO_DeInit+0x214>)
 8003300:	4013      	ands	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003304:	4b44      	ldr	r3, [pc, #272]	@ (8003418 <HAL_GPIO_DeInit+0x214>)
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	43db      	mvns	r3, r3
 800330c:	4942      	ldr	r1, [pc, #264]	@ (8003418 <HAL_GPIO_DeInit+0x214>)
 800330e:	4013      	ands	r3, r2
 8003310:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003312:	4b41      	ldr	r3, [pc, #260]	@ (8003418 <HAL_GPIO_DeInit+0x214>)
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	43db      	mvns	r3, r3
 800331a:	493f      	ldr	r1, [pc, #252]	@ (8003418 <HAL_GPIO_DeInit+0x214>)
 800331c:	4013      	ands	r3, r2
 800331e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	220f      	movs	r2, #15
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003330:	4a2e      	ldr	r2, [pc, #184]	@ (80033ec <HAL_GPIO_DeInit+0x1e8>)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	43da      	mvns	r2, r3
 8003340:	482a      	ldr	r0, [pc, #168]	@ (80033ec <HAL_GPIO_DeInit+0x1e8>)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	400a      	ands	r2, r1
 8003348:	3302      	adds	r3, #2
 800334a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	2103      	movs	r1, #3
 8003358:	fa01 f303 	lsl.w	r3, r1, r3
 800335c:	43db      	mvns	r3, r3
 800335e:	401a      	ands	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	08da      	lsrs	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3208      	adds	r2, #8
 800336c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	220f      	movs	r2, #15
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	08d2      	lsrs	r2, r2, #3
 8003384:	4019      	ands	r1, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3208      	adds	r2, #8
 800338a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2103      	movs	r1, #3
 8003398:	fa01 f303 	lsl.w	r3, r1, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	401a      	ands	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	2101      	movs	r1, #1
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	401a      	ands	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	2103      	movs	r1, #3
 80033c2:	fa01 f303 	lsl.w	r3, r1, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	401a      	ands	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	3301      	adds	r3, #1
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	f67f af22 	bls.w	8003220 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40013800 	.word	0x40013800
 80033f0:	40020000 	.word	0x40020000
 80033f4:	40020400 	.word	0x40020400
 80033f8:	40020800 	.word	0x40020800
 80033fc:	40020c00 	.word	0x40020c00
 8003400:	40021000 	.word	0x40021000
 8003404:	40021400 	.word	0x40021400
 8003408:	40021800 	.word	0x40021800
 800340c:	40021c00 	.word	0x40021c00
 8003410:	40022000 	.word	0x40022000
 8003414:	40022400 	.word	0x40022400
 8003418:	40013c00 	.word	0x40013c00

0800341c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
 8003428:	4613      	mov	r3, r2
 800342a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800342c:	787b      	ldrb	r3, [r7, #1]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003438:	e003      	b.n	8003442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800343a:	887b      	ldrh	r3, [r7, #2]
 800343c:	041a      	lsls	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	619a      	str	r2, [r3, #24]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e12b      	b.n	80036ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fe fd68 	bl	8001f4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	@ 0x24
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034b4:	f001 ff06 	bl	80052c4 <HAL_RCC_GetPCLK1Freq>
 80034b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4a81      	ldr	r2, [pc, #516]	@ (80036c4 <HAL_I2C_Init+0x274>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d807      	bhi.n	80034d4 <HAL_I2C_Init+0x84>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a80      	ldr	r2, [pc, #512]	@ (80036c8 <HAL_I2C_Init+0x278>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	e006      	b.n	80034e2 <HAL_I2C_Init+0x92>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a7d      	ldr	r2, [pc, #500]	@ (80036cc <HAL_I2C_Init+0x27c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	bf94      	ite	ls
 80034dc:	2301      	movls	r3, #1
 80034de:	2300      	movhi	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0e7      	b.n	80036ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a78      	ldr	r2, [pc, #480]	@ (80036d0 <HAL_I2C_Init+0x280>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	0c9b      	lsrs	r3, r3, #18
 80034f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a6a      	ldr	r2, [pc, #424]	@ (80036c4 <HAL_I2C_Init+0x274>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d802      	bhi.n	8003524 <HAL_I2C_Init+0xd4>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3301      	adds	r3, #1
 8003522:	e009      	b.n	8003538 <HAL_I2C_Init+0xe8>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	4a69      	ldr	r2, [pc, #420]	@ (80036d4 <HAL_I2C_Init+0x284>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	099b      	lsrs	r3, r3, #6
 8003536:	3301      	adds	r3, #1
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	430b      	orrs	r3, r1
 800353e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800354a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	495c      	ldr	r1, [pc, #368]	@ (80036c4 <HAL_I2C_Init+0x274>)
 8003554:	428b      	cmp	r3, r1
 8003556:	d819      	bhi.n	800358c <HAL_I2C_Init+0x13c>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1e59      	subs	r1, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	fbb1 f3f3 	udiv	r3, r1, r3
 8003566:	1c59      	adds	r1, r3, #1
 8003568:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800356c:	400b      	ands	r3, r1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_I2C_Init+0x138>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1e59      	subs	r1, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003580:	3301      	adds	r3, #1
 8003582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003586:	e051      	b.n	800362c <HAL_I2C_Init+0x1dc>
 8003588:	2304      	movs	r3, #4
 800358a:	e04f      	b.n	800362c <HAL_I2C_Init+0x1dc>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d111      	bne.n	80035b8 <HAL_I2C_Init+0x168>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1e58      	subs	r0, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	440b      	add	r3, r1
 80035a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e012      	b.n	80035de <HAL_I2C_Init+0x18e>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e58      	subs	r0, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	0099      	lsls	r1, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Init+0x196>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e022      	b.n	800362c <HAL_I2C_Init+0x1dc>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10e      	bne.n	800360c <HAL_I2C_Init+0x1bc>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1e58      	subs	r0, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6859      	ldr	r1, [r3, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	440b      	add	r3, r1
 80035fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003600:	3301      	adds	r3, #1
 8003602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800360a:	e00f      	b.n	800362c <HAL_I2C_Init+0x1dc>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1e58      	subs	r0, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	0099      	lsls	r1, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003622:	3301      	adds	r3, #1
 8003624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	6809      	ldr	r1, [r1, #0]
 8003630:	4313      	orrs	r3, r2
 8003632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69da      	ldr	r2, [r3, #28]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800365a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6911      	ldr	r1, [r2, #16]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68d2      	ldr	r2, [r2, #12]
 8003666:	4311      	orrs	r1, r2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	430b      	orrs	r3, r1
 800366e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	000186a0 	.word	0x000186a0
 80036c8:	001e847f 	.word	0x001e847f
 80036cc:	003d08ff 	.word	0x003d08ff
 80036d0:	431bde83 	.word	0x431bde83
 80036d4:	10624dd3 	.word	0x10624dd3

080036d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	817b      	strh	r3, [r7, #10]
 80036ea:	460b      	mov	r3, r1
 80036ec:	813b      	strh	r3, [r7, #8]
 80036ee:	4613      	mov	r3, r2
 80036f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036f2:	f7ff fa67 	bl	8002bc4 <HAL_GetTick>
 80036f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b20      	cmp	r3, #32
 8003702:	f040 80d9 	bne.w	80038b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2319      	movs	r3, #25
 800370c:	2201      	movs	r2, #1
 800370e:	496d      	ldr	r1, [pc, #436]	@ (80038c4 <HAL_I2C_Mem_Write+0x1ec>)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fc8b 	bl	800402c <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800371c:	2302      	movs	r3, #2
 800371e:	e0cc      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_I2C_Mem_Write+0x56>
 800372a:	2302      	movs	r3, #2
 800372c:	e0c5      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d007      	beq.n	8003754 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0201 	orr.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003762:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2221      	movs	r2, #33	@ 0x21
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	@ 0x40
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4a4d      	ldr	r2, [pc, #308]	@ (80038c8 <HAL_I2C_Mem_Write+0x1f0>)
 8003794:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003796:	88f8      	ldrh	r0, [r7, #6]
 8003798:	893a      	ldrh	r2, [r7, #8]
 800379a:	8979      	ldrh	r1, [r7, #10]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4603      	mov	r3, r0
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 fac2 	bl	8003d30 <I2C_RequestMemoryWrite>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d052      	beq.n	8003858 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e081      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 fd50 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d107      	bne.n	80037de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e06b      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b04      	cmp	r3, #4
 800381e:	d11b      	bne.n	8003858 <HAL_I2C_Mem_Write+0x180>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003824:	2b00      	cmp	r3, #0
 8003826:	d017      	beq.n	8003858 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1aa      	bne.n	80037b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fd43 	bl	80042f0 <I2C_WaitOnBTFFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00d      	beq.n	800388c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	2b04      	cmp	r3, #4
 8003876:	d107      	bne.n	8003888 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003886:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e016      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	00100002 	.word	0x00100002
 80038c8:	ffff0000 	.word	0xffff0000

080038cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08c      	sub	sp, #48	@ 0x30
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	4608      	mov	r0, r1
 80038d6:	4611      	mov	r1, r2
 80038d8:	461a      	mov	r2, r3
 80038da:	4603      	mov	r3, r0
 80038dc:	817b      	strh	r3, [r7, #10]
 80038de:	460b      	mov	r3, r1
 80038e0:	813b      	strh	r3, [r7, #8]
 80038e2:	4613      	mov	r3, r2
 80038e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038e6:	f7ff f96d 	bl	8002bc4 <HAL_GetTick>
 80038ea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	f040 8214 	bne.w	8003d22 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	2319      	movs	r3, #25
 8003900:	2201      	movs	r2, #1
 8003902:	497b      	ldr	r1, [pc, #492]	@ (8003af0 <HAL_I2C_Mem_Read+0x224>)
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fb91 	bl	800402c <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
 8003912:	e207      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_I2C_Mem_Read+0x56>
 800391e:	2302      	movs	r3, #2
 8003920:	e200      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b01      	cmp	r3, #1
 8003936:	d007      	beq.n	8003948 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0201 	orr.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003956:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2222      	movs	r2, #34	@ 0x22
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2240      	movs	r2, #64	@ 0x40
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003972:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003978:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a5b      	ldr	r2, [pc, #364]	@ (8003af4 <HAL_I2C_Mem_Read+0x228>)
 8003988:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800398a:	88f8      	ldrh	r0, [r7, #6]
 800398c:	893a      	ldrh	r2, [r7, #8]
 800398e:	8979      	ldrh	r1, [r7, #10]
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	4603      	mov	r3, r0
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fa5e 	bl	8003e5c <I2C_RequestMemoryRead>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e1bc      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d113      	bne.n	80039da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b2:	2300      	movs	r3, #0
 80039b4:	623b      	str	r3, [r7, #32]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	623b      	str	r3, [r7, #32]
 80039c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	e190      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d11b      	bne.n	8003a1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	61fb      	str	r3, [r7, #28]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	e170      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d11b      	bne.n	8003a5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	e150      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a70:	e144      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	f200 80f1 	bhi.w	8003c5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d123      	bne.n	8003acc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a86:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fc79 	bl	8004380 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e145      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003aca:	e117      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d14e      	bne.n	8003b72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ada:	2200      	movs	r2, #0
 8003adc:	4906      	ldr	r1, [pc, #24]	@ (8003af8 <HAL_I2C_Mem_Read+0x22c>)
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 faa4 	bl	800402c <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d008      	beq.n	8003afc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e11a      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
 8003aee:	bf00      	nop
 8003af0:	00100002 	.word	0x00100002
 8003af4:	ffff0000 	.word	0xffff0000
 8003af8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b70:	e0c4      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b78:	2200      	movs	r2, #0
 8003b7a:	496c      	ldr	r1, [pc, #432]	@ (8003d2c <HAL_I2C_Mem_Read+0x460>)
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fa55 	bl	800402c <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0cb      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	4955      	ldr	r1, [pc, #340]	@ (8003d2c <HAL_I2C_Mem_Read+0x460>)
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 fa27 	bl	800402c <I2C_WaitOnFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e09d      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691a      	ldr	r2, [r3, #16]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c5c:	e04e      	b.n	8003cfc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c60:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fb8c 	bl	8004380 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e058      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d124      	bne.n	8003cfc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d107      	bne.n	8003cca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cc8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f47f aeb6 	bne.w	8003a72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e000      	b.n	8003d24 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d22:	2302      	movs	r3, #2
  }
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3728      	adds	r7, #40	@ 0x28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	00010004 	.word	0x00010004

08003d30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b088      	sub	sp, #32
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	4608      	mov	r0, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	817b      	strh	r3, [r7, #10]
 8003d42:	460b      	mov	r3, r1
 8003d44:	813b      	strh	r3, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f960 	bl	800402c <I2C_WaitOnFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00d      	beq.n	8003d8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d80:	d103      	bne.n	8003d8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e05f      	b.n	8003e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d8e:	897b      	ldrh	r3, [r7, #10]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	6a3a      	ldr	r2, [r7, #32]
 8003da2:	492d      	ldr	r1, [pc, #180]	@ (8003e58 <I2C_RequestMemoryWrite+0x128>)
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f9bb 	bl	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e04c      	b.n	8003e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dcc:	6a39      	ldr	r1, [r7, #32]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 fa46 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00d      	beq.n	8003df6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d107      	bne.n	8003df2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e02b      	b.n	8003e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d105      	bne.n	8003e08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dfc:	893b      	ldrh	r3, [r7, #8]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]
 8003e06:	e021      	b.n	8003e4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e08:	893b      	ldrh	r3, [r7, #8]
 8003e0a:	0a1b      	lsrs	r3, r3, #8
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e18:	6a39      	ldr	r1, [r7, #32]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 fa20 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d107      	bne.n	8003e3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e005      	b.n	8003e4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e42:	893b      	ldrh	r3, [r7, #8]
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	00010002 	.word	0x00010002

08003e5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	4608      	mov	r0, r1
 8003e66:	4611      	mov	r1, r2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	817b      	strh	r3, [r7, #10]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	813b      	strh	r3, [r7, #8]
 8003e72:	4613      	mov	r3, r2
 8003e74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f8c2 	bl	800402c <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ebc:	d103      	bne.n	8003ec6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e0aa      	b.n	8004020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eca:	897b      	ldrh	r3, [r7, #10]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003ed8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	6a3a      	ldr	r2, [r7, #32]
 8003ede:	4952      	ldr	r1, [pc, #328]	@ (8004028 <I2C_RequestMemoryRead+0x1cc>)
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f91d 	bl	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e097      	b.n	8004020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f08:	6a39      	ldr	r1, [r7, #32]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 f9a8 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00d      	beq.n	8003f32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d107      	bne.n	8003f2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e076      	b.n	8004020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d105      	bne.n	8003f44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f38:	893b      	ldrh	r3, [r7, #8]
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	611a      	str	r2, [r3, #16]
 8003f42:	e021      	b.n	8003f88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f44:	893b      	ldrh	r3, [r7, #8]
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f54:	6a39      	ldr	r1, [r7, #32]
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f982 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00d      	beq.n	8003f7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d107      	bne.n	8003f7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e050      	b.n	8004020 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f7e:	893b      	ldrh	r3, [r7, #8]
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f8a:	6a39      	ldr	r1, [r7, #32]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f967 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00d      	beq.n	8003fb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d107      	bne.n	8003fb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e035      	b.n	8004020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f82b 	bl	800402c <I2C_WaitOnFlagUntilTimeout>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fea:	d103      	bne.n	8003ff4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e013      	b.n	8004020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ff8:	897b      	ldrh	r3, [r7, #10]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f043 0301 	orr.w	r3, r3, #1
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	6a3a      	ldr	r2, [r7, #32]
 800400c:	4906      	ldr	r1, [pc, #24]	@ (8004028 <I2C_RequestMemoryRead+0x1cc>)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f886 	bl	8004120 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	00010002 	.word	0x00010002

0800402c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	4613      	mov	r3, r2
 800403a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800403c:	e048      	b.n	80040d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004044:	d044      	beq.n	80040d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004046:	f7fe fdbd 	bl	8002bc4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d302      	bcc.n	800405c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d139      	bne.n	80040d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	0c1b      	lsrs	r3, r3, #16
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	d10d      	bne.n	8004082 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	43da      	mvns	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4013      	ands	r3, r2
 8004072:	b29b      	uxth	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	e00c      	b.n	800409c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	43da      	mvns	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	4013      	ands	r3, r2
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d116      	bne.n	80040d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	f043 0220 	orr.w	r2, r3, #32
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e023      	b.n	8004118 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	0c1b      	lsrs	r3, r3, #16
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d10d      	bne.n	80040f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	43da      	mvns	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4013      	ands	r3, r2
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	e00c      	b.n	8004110 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	43da      	mvns	r2, r3
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	4013      	ands	r3, r2
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	79fb      	ldrb	r3, [r7, #7]
 8004112:	429a      	cmp	r2, r3
 8004114:	d093      	beq.n	800403e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800412e:	e071      	b.n	8004214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800413e:	d123      	bne.n	8004188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800414e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004158:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	f043 0204 	orr.w	r2, r3, #4
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e067      	b.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800418e:	d041      	beq.n	8004214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004190:	f7fe fd18 	bl	8002bc4 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	429a      	cmp	r2, r3
 800419e:	d302      	bcc.n	80041a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d136      	bne.n	8004214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	0c1b      	lsrs	r3, r3, #16
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d10c      	bne.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	43da      	mvns	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bf14      	ite	ne
 80041c2:	2301      	movne	r3, #1
 80041c4:	2300      	moveq	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	e00b      	b.n	80041e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	43da      	mvns	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4013      	ands	r3, r2
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf14      	ite	ne
 80041dc:	2301      	movne	r3, #1
 80041de:	2300      	moveq	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	f043 0220 	orr.w	r2, r3, #32
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e021      	b.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	0c1b      	lsrs	r3, r3, #16
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d10c      	bne.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	43da      	mvns	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4013      	ands	r3, r2
 800422a:	b29b      	uxth	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	e00b      	b.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	43da      	mvns	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4013      	ands	r3, r2
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	bf14      	ite	ne
 800424a:	2301      	movne	r3, #1
 800424c:	2300      	moveq	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	f47f af6d 	bne.w	8004130 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800426c:	e034      	b.n	80042d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f8e3 	bl	800443a <I2C_IsAcknowledgeFailed>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e034      	b.n	80042e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004284:	d028      	beq.n	80042d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7fe fc9d 	bl	8002bc4 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11d      	bne.n	80042d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a6:	2b80      	cmp	r3, #128	@ 0x80
 80042a8:	d016      	beq.n	80042d8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	f043 0220 	orr.w	r2, r3, #32
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e007      	b.n	80042e8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e2:	2b80      	cmp	r3, #128	@ 0x80
 80042e4:	d1c3      	bne.n	800426e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042fc:	e034      	b.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f89b 	bl	800443a <I2C_IsAcknowledgeFailed>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e034      	b.n	8004378 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004314:	d028      	beq.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004316:	f7fe fc55 	bl	8002bc4 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	429a      	cmp	r2, r3
 8004324:	d302      	bcc.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11d      	bne.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d016      	beq.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e007      	b.n	8004378 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b04      	cmp	r3, #4
 8004374:	d1c3      	bne.n	80042fe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800438c:	e049      	b.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b10      	cmp	r3, #16
 800439a:	d119      	bne.n	80043d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f06f 0210 	mvn.w	r2, #16
 80043a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e030      	b.n	8004432 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d0:	f7fe fbf8 	bl	8002bc4 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d302      	bcc.n	80043e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d11d      	bne.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f0:	2b40      	cmp	r3, #64	@ 0x40
 80043f2:	d016      	beq.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f043 0220 	orr.w	r2, r3, #32
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e007      	b.n	8004432 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442c:	2b40      	cmp	r3, #64	@ 0x40
 800442e:	d1ae      	bne.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004450:	d11b      	bne.n	800448a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800445a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f043 0204 	orr.w	r2, r3, #4
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0bf      	b.n	800462a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fd fdae 	bl	8002020 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80044da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6999      	ldr	r1, [r3, #24]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6899      	ldr	r1, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4b4a      	ldr	r3, [pc, #296]	@ (8004634 <HAL_LTDC_Init+0x19c>)
 800450c:	400b      	ands	r3, r1
 800450e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68d9      	ldr	r1, [r3, #12]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4b3e      	ldr	r3, [pc, #248]	@ (8004634 <HAL_LTDC_Init+0x19c>)
 800453a:	400b      	ands	r3, r1
 800453c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	041b      	lsls	r3, r3, #16
 8004544:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68d9      	ldr	r1, [r3, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1a      	ldr	r2, [r3, #32]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6919      	ldr	r1, [r3, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4b33      	ldr	r3, [pc, #204]	@ (8004634 <HAL_LTDC_Init+0x19c>)
 8004568:	400b      	ands	r3, r1
 800456a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6919      	ldr	r1, [r3, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6959      	ldr	r1, [r3, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4b27      	ldr	r3, [pc, #156]	@ (8004634 <HAL_LTDC_Init+0x19c>)
 8004596:	400b      	ands	r3, r1
 8004598:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6959      	ldr	r1, [r3, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80045c8:	041b      	lsls	r3, r3, #16
 80045ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80045da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0206 	orr.w	r2, r2, #6
 8004606:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 0201 	orr.w	r2, r2, #1
 8004616:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	f000f800 	.word	0xf000f800

08004638 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004638:	b5b0      	push	{r4, r5, r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_LTDC_ConfigLayer+0x1a>
 800464e:	2302      	movs	r3, #2
 8004650:	e02c      	b.n	80046ac <HAL_LTDC_ConfigLayer+0x74>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2134      	movs	r1, #52	@ 0x34
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	4413      	add	r3, r2
 800466e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4614      	mov	r4, r2
 8004676:	461d      	mov	r5, r3
 8004678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800467a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800467c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800467e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f811 	bl	80046b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2201      	movs	r2, #1
 8004698:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bdb0      	pop	{r4, r5, r7, pc}

080046b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b089      	sub	sp, #36	@ 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	0c1b      	lsrs	r3, r3, #16
 80046cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d0:	4413      	add	r3, r2
 80046d2:	041b      	lsls	r3, r3, #16
 80046d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	01db      	lsls	r3, r3, #7
 80046e0:	4413      	add	r3, r2
 80046e2:	3384      	adds	r3, #132	@ 0x84
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	4611      	mov	r1, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	01d2      	lsls	r2, r2, #7
 80046f0:	440a      	add	r2, r1
 80046f2:	3284      	adds	r2, #132	@ 0x84
 80046f4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80046f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	0c1b      	lsrs	r3, r3, #16
 8004706:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800470a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800470c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	01db      	lsls	r3, r3, #7
 8004718:	440b      	add	r3, r1
 800471a:	3384      	adds	r3, #132	@ 0x84
 800471c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004722:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004732:	4413      	add	r3, r2
 8004734:	041b      	lsls	r3, r3, #16
 8004736:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	01db      	lsls	r3, r3, #7
 8004742:	4413      	add	r3, r2
 8004744:	3384      	adds	r3, #132	@ 0x84
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	4611      	mov	r1, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	01d2      	lsls	r2, r2, #7
 8004752:	440a      	add	r2, r1
 8004754:	3284      	adds	r2, #132	@ 0x84
 8004756:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800475a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800476a:	4413      	add	r3, r2
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	01db      	lsls	r3, r3, #7
 8004778:	440b      	add	r3, r1
 800477a:	3384      	adds	r3, #132	@ 0x84
 800477c:	4619      	mov	r1, r3
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4313      	orrs	r3, r2
 8004782:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	01db      	lsls	r3, r3, #7
 800478e:	4413      	add	r3, r2
 8004790:	3384      	adds	r3, #132	@ 0x84
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	4611      	mov	r1, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	01d2      	lsls	r2, r2, #7
 800479e:	440a      	add	r2, r1
 80047a0:	3284      	adds	r2, #132	@ 0x84
 80047a2:	f023 0307 	bic.w	r3, r3, #7
 80047a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	01db      	lsls	r3, r3, #7
 80047b2:	4413      	add	r3, r2
 80047b4:	3384      	adds	r3, #132	@ 0x84
 80047b6:	461a      	mov	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	061b      	lsls	r3, r3, #24
 80047d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	01db      	lsls	r3, r3, #7
 80047e4:	4413      	add	r3, r2
 80047e6:	3384      	adds	r3, #132	@ 0x84
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	01db      	lsls	r3, r3, #7
 80047f4:	4413      	add	r3, r2
 80047f6:	3384      	adds	r3, #132	@ 0x84
 80047f8:	461a      	mov	r2, r3
 80047fa:	2300      	movs	r3, #0
 80047fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004804:	461a      	mov	r2, r3
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	431a      	orrs	r2, r3
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	431a      	orrs	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4619      	mov	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	01db      	lsls	r3, r3, #7
 8004818:	440b      	add	r3, r1
 800481a:	3384      	adds	r3, #132	@ 0x84
 800481c:	4619      	mov	r1, r3
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	01db      	lsls	r3, r3, #7
 800482e:	4413      	add	r3, r2
 8004830:	3384      	adds	r3, #132	@ 0x84
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	4611      	mov	r1, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	01d2      	lsls	r2, r2, #7
 800483e:	440a      	add	r2, r1
 8004840:	3284      	adds	r2, #132	@ 0x84
 8004842:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004846:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	01db      	lsls	r3, r3, #7
 8004852:	4413      	add	r3, r2
 8004854:	3384      	adds	r3, #132	@ 0x84
 8004856:	461a      	mov	r2, r3
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	01db      	lsls	r3, r3, #7
 8004868:	4413      	add	r3, r2
 800486a:	3384      	adds	r3, #132	@ 0x84
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	4611      	mov	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	01d2      	lsls	r2, r2, #7
 8004878:	440a      	add	r2, r1
 800487a:	3284      	adds	r2, #132	@ 0x84
 800487c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004880:	f023 0307 	bic.w	r3, r3, #7
 8004884:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	69da      	ldr	r2, [r3, #28]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	6809      	ldr	r1, [r1, #0]
 8004892:	4608      	mov	r0, r1
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	01c9      	lsls	r1, r1, #7
 8004898:	4401      	add	r1, r0
 800489a:	3184      	adds	r1, #132	@ 0x84
 800489c:	4313      	orrs	r3, r2
 800489e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	01db      	lsls	r3, r3, #7
 80048aa:	4413      	add	r3, r2
 80048ac:	3384      	adds	r3, #132	@ 0x84
 80048ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	01db      	lsls	r3, r3, #7
 80048ba:	4413      	add	r3, r2
 80048bc:	3384      	adds	r3, #132	@ 0x84
 80048be:	461a      	mov	r2, r3
 80048c0:	2300      	movs	r3, #0
 80048c2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	01db      	lsls	r3, r3, #7
 80048ce:	4413      	add	r3, r2
 80048d0:	3384      	adds	r3, #132	@ 0x84
 80048d2:	461a      	mov	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80048e2:	2304      	movs	r3, #4
 80048e4:	61fb      	str	r3, [r7, #28]
 80048e6:	e01b      	b.n	8004920 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d102      	bne.n	80048f6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80048f0:	2303      	movs	r3, #3
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	e014      	b.n	8004920 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d00b      	beq.n	8004916 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004902:	2b02      	cmp	r3, #2
 8004904:	d007      	beq.n	8004916 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800490a:	2b03      	cmp	r3, #3
 800490c:	d003      	beq.n	8004916 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004912:	2b07      	cmp	r3, #7
 8004914:	d102      	bne.n	800491c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004916:	2302      	movs	r3, #2
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	e001      	b.n	8004920 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800491c:	2301      	movs	r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	01db      	lsls	r3, r3, #7
 800492a:	4413      	add	r3, r2
 800492c:	3384      	adds	r3, #132	@ 0x84
 800492e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	4611      	mov	r1, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	01d2      	lsls	r2, r2, #7
 800493a:	440a      	add	r2, r1
 800493c:	3284      	adds	r2, #132	@ 0x84
 800493e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004942:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	1acb      	subs	r3, r1, r3
 800495a:	69f9      	ldr	r1, [r7, #28]
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	6809      	ldr	r1, [r1, #0]
 8004966:	4608      	mov	r0, r1
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	01c9      	lsls	r1, r1, #7
 800496c:	4401      	add	r1, r0
 800496e:	3184      	adds	r1, #132	@ 0x84
 8004970:	4313      	orrs	r3, r2
 8004972:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	461a      	mov	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	01db      	lsls	r3, r3, #7
 800497e:	4413      	add	r3, r2
 8004980:	3384      	adds	r3, #132	@ 0x84
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	4611      	mov	r1, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	01d2      	lsls	r2, r2, #7
 800498e:	440a      	add	r2, r1
 8004990:	3284      	adds	r2, #132	@ 0x84
 8004992:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004996:	f023 0307 	bic.w	r3, r3, #7
 800499a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	01db      	lsls	r3, r3, #7
 80049a6:	4413      	add	r3, r2
 80049a8:	3384      	adds	r3, #132	@ 0x84
 80049aa:	461a      	mov	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	461a      	mov	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	01db      	lsls	r3, r3, #7
 80049bc:	4413      	add	r3, r2
 80049be:	3384      	adds	r3, #132	@ 0x84
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	4611      	mov	r1, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	01d2      	lsls	r2, r2, #7
 80049cc:	440a      	add	r2, r1
 80049ce:	3284      	adds	r2, #132	@ 0x84
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6013      	str	r3, [r2, #0]
}
 80049d6:	bf00      	nop
 80049d8:	3724      	adds	r7, #36	@ 0x24
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
	...

080049e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e267      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d075      	beq.n	8004aee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a02:	4b88      	ldr	r3, [pc, #544]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d00c      	beq.n	8004a28 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a0e:	4b85      	ldr	r3, [pc, #532]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d112      	bne.n	8004a40 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a1a:	4b82      	ldr	r3, [pc, #520]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a26:	d10b      	bne.n	8004a40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	4b7e      	ldr	r3, [pc, #504]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d05b      	beq.n	8004aec <HAL_RCC_OscConfig+0x108>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d157      	bne.n	8004aec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e242      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0x74>
 8004a4a:	4b76      	ldr	r3, [pc, #472]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a75      	ldr	r2, [pc, #468]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e01d      	b.n	8004a94 <HAL_RCC_OscConfig+0xb0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a60:	d10c      	bne.n	8004a7c <HAL_RCC_OscConfig+0x98>
 8004a62:	4b70      	ldr	r3, [pc, #448]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a6f      	ldr	r2, [pc, #444]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a6c      	ldr	r2, [pc, #432]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e00b      	b.n	8004a94 <HAL_RCC_OscConfig+0xb0>
 8004a7c:	4b69      	ldr	r3, [pc, #420]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a68      	ldr	r2, [pc, #416]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	4b66      	ldr	r3, [pc, #408]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a65      	ldr	r2, [pc, #404]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d013      	beq.n	8004ac4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9c:	f7fe f892 	bl	8002bc4 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa4:	f7fe f88e 	bl	8002bc4 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b64      	cmp	r3, #100	@ 0x64
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e207      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0xc0>
 8004ac2:	e014      	b.n	8004aee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac4:	f7fe f87e 	bl	8002bc4 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004acc:	f7fe f87a 	bl	8002bc4 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b64      	cmp	r3, #100	@ 0x64
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e1f3      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ade:	4b51      	ldr	r3, [pc, #324]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0xe8>
 8004aea:	e000      	b.n	8004aee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d063      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004afa:	4b4a      	ldr	r3, [pc, #296]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b06:	4b47      	ldr	r3, [pc, #284]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d11c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b12:	4b44      	ldr	r3, [pc, #272]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d116      	bne.n	8004b4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1e:	4b41      	ldr	r3, [pc, #260]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_RCC_OscConfig+0x152>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d001      	beq.n	8004b36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e1c7      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b36:	4b3b      	ldr	r3, [pc, #236]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	4937      	ldr	r1, [pc, #220]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4a:	e03a      	b.n	8004bc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d020      	beq.n	8004b96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b54:	4b34      	ldr	r3, [pc, #208]	@ (8004c28 <HAL_RCC_OscConfig+0x244>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5a:	f7fe f833 	bl	8002bc4 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b62:	f7fe f82f 	bl	8002bc4 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e1a8      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b74:	4b2b      	ldr	r3, [pc, #172]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b80:	4b28      	ldr	r3, [pc, #160]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	4925      	ldr	r1, [pc, #148]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	600b      	str	r3, [r1, #0]
 8004b94:	e015      	b.n	8004bc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b96:	4b24      	ldr	r3, [pc, #144]	@ (8004c28 <HAL_RCC_OscConfig+0x244>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9c:	f7fe f812 	bl	8002bc4 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba4:	f7fe f80e 	bl	8002bc4 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e187      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d036      	beq.n	8004c3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d016      	beq.n	8004c04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bd6:	4b15      	ldr	r3, [pc, #84]	@ (8004c2c <HAL_RCC_OscConfig+0x248>)
 8004bd8:	2201      	movs	r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fd fff2 	bl	8002bc4 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be4:	f7fd ffee 	bl	8002bc4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e167      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8004c24 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0x200>
 8004c02:	e01b      	b.n	8004c3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c04:	4b09      	ldr	r3, [pc, #36]	@ (8004c2c <HAL_RCC_OscConfig+0x248>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0a:	f7fd ffdb 	bl	8002bc4 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c10:	e00e      	b.n	8004c30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c12:	f7fd ffd7 	bl	8002bc4 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d907      	bls.n	8004c30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e150      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
 8004c24:	40023800 	.word	0x40023800
 8004c28:	42470000 	.word	0x42470000
 8004c2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c30:	4b88      	ldr	r3, [pc, #544]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004c32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1ea      	bne.n	8004c12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8097 	beq.w	8004d78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c4e:	4b81      	ldr	r3, [pc, #516]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10f      	bne.n	8004c7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	4a7c      	ldr	r2, [pc, #496]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c76:	2301      	movs	r3, #1
 8004c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7a:	4b77      	ldr	r3, [pc, #476]	@ (8004e58 <HAL_RCC_OscConfig+0x474>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d118      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c86:	4b74      	ldr	r3, [pc, #464]	@ (8004e58 <HAL_RCC_OscConfig+0x474>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a73      	ldr	r2, [pc, #460]	@ (8004e58 <HAL_RCC_OscConfig+0x474>)
 8004c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c92:	f7fd ff97 	bl	8002bc4 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9a:	f7fd ff93 	bl	8002bc4 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e10c      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cac:	4b6a      	ldr	r3, [pc, #424]	@ (8004e58 <HAL_RCC_OscConfig+0x474>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d106      	bne.n	8004cce <HAL_RCC_OscConfig+0x2ea>
 8004cc0:	4b64      	ldr	r3, [pc, #400]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc4:	4a63      	ldr	r2, [pc, #396]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ccc:	e01c      	b.n	8004d08 <HAL_RCC_OscConfig+0x324>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x30c>
 8004cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cda:	4a5e      	ldr	r2, [pc, #376]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce6:	4a5b      	ldr	r2, [pc, #364]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cee:	e00b      	b.n	8004d08 <HAL_RCC_OscConfig+0x324>
 8004cf0:	4b58      	ldr	r3, [pc, #352]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf4:	4a57      	ldr	r2, [pc, #348]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cfc:	4b55      	ldr	r3, [pc, #340]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d00:	4a54      	ldr	r2, [pc, #336]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d02:	f023 0304 	bic.w	r3, r3, #4
 8004d06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d015      	beq.n	8004d3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d10:	f7fd ff58 	bl	8002bc4 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d16:	e00a      	b.n	8004d2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d18:	f7fd ff54 	bl	8002bc4 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e0cb      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2e:	4b49      	ldr	r3, [pc, #292]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d0ee      	beq.n	8004d18 <HAL_RCC_OscConfig+0x334>
 8004d3a:	e014      	b.n	8004d66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3c:	f7fd ff42 	bl	8002bc4 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d42:	e00a      	b.n	8004d5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d44:	f7fd ff3e 	bl	8002bc4 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0b5      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1ee      	bne.n	8004d44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d66:	7dfb      	ldrb	r3, [r7, #23]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d105      	bne.n	8004d78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d6c:	4b39      	ldr	r3, [pc, #228]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	4a38      	ldr	r2, [pc, #224]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80a1 	beq.w	8004ec4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d82:	4b34      	ldr	r3, [pc, #208]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d05c      	beq.n	8004e48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d141      	bne.n	8004e1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d96:	4b31      	ldr	r3, [pc, #196]	@ (8004e5c <HAL_RCC_OscConfig+0x478>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9c:	f7fd ff12 	bl	8002bc4 <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da4:	f7fd ff0e 	bl	8002bc4 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e087      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db6:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1f0      	bne.n	8004da4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	019b      	lsls	r3, r3, #6
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	061b      	lsls	r3, r3, #24
 8004de6:	491b      	ldr	r1, [pc, #108]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dec:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <HAL_RCC_OscConfig+0x478>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df2:	f7fd fee7 	bl	8002bc4 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfa:	f7fd fee3 	bl	8002bc4 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e05c      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0c:	4b11      	ldr	r3, [pc, #68]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x416>
 8004e18:	e054      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1a:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <HAL_RCC_OscConfig+0x478>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fd fed0 	bl	8002bc4 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e28:	f7fd fecc 	bl	8002bc4 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e045      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3a:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <HAL_RCC_OscConfig+0x470>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x444>
 8004e46:	e03d      	b.n	8004ec4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d107      	bne.n	8004e60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e038      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e60:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed0 <HAL_RCC_OscConfig+0x4ec>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d028      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d121      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d11a      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e90:	4013      	ands	r3, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d111      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea6:	085b      	lsrs	r3, r3, #1
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800

08004ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0cc      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee8:	4b68      	ldr	r3, [pc, #416]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d90c      	bls.n	8004f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef6:	4b65      	ldr	r3, [pc, #404]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b63      	ldr	r3, [pc, #396]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0b8      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d020      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f28:	4b59      	ldr	r3, [pc, #356]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	4a58      	ldr	r2, [pc, #352]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f40:	4b53      	ldr	r3, [pc, #332]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	4a52      	ldr	r2, [pc, #328]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f4c:	4b50      	ldr	r3, [pc, #320]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	494d      	ldr	r1, [pc, #308]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d044      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f72:	4b47      	ldr	r3, [pc, #284]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d119      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e07f      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d003      	beq.n	8004f92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f8e:	2b03      	cmp	r3, #3
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f92:	4b3f      	ldr	r3, [pc, #252]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e06f      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e067      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fb2:	4b37      	ldr	r3, [pc, #220]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f023 0203 	bic.w	r2, r3, #3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	4934      	ldr	r1, [pc, #208]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc4:	f7fd fdfe 	bl	8002bc4 <HAL_GetTick>
 8004fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fca:	e00a      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fcc:	f7fd fdfa 	bl	8002bc4 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e04f      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe2:	4b2b      	ldr	r3, [pc, #172]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 020c 	and.w	r2, r3, #12
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d1eb      	bne.n	8004fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff4:	4b25      	ldr	r3, [pc, #148]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d20c      	bcs.n	800501c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005002:	4b22      	ldr	r3, [pc, #136]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800500a:	4b20      	ldr	r3, [pc, #128]	@ (800508c <HAL_RCC_ClockConfig+0x1b8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d001      	beq.n	800501c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e032      	b.n	8005082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005028:	4b19      	ldr	r3, [pc, #100]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	4916      	ldr	r1, [pc, #88]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005046:	4b12      	ldr	r3, [pc, #72]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	490e      	ldr	r1, [pc, #56]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800505a:	f000 f821 	bl	80050a0 <HAL_RCC_GetSysClockFreq>
 800505e:	4602      	mov	r2, r0
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	490a      	ldr	r1, [pc, #40]	@ (8005094 <HAL_RCC_ClockConfig+0x1c0>)
 800506c:	5ccb      	ldrb	r3, [r1, r3]
 800506e:	fa22 f303 	lsr.w	r3, r2, r3
 8005072:	4a09      	ldr	r2, [pc, #36]	@ (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8005074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005076:	4b09      	ldr	r3, [pc, #36]	@ (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fd fd5e 	bl	8002b3c <HAL_InitTick>

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023c00 	.word	0x40023c00
 8005090:	40023800 	.word	0x40023800
 8005094:	08007a48 	.word	0x08007a48
 8005098:	20000018 	.word	0x20000018
 800509c:	2000001c 	.word	0x2000001c

080050a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a4:	b094      	sub	sp, #80	@ 0x50
 80050a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050b8:	4b79      	ldr	r3, [pc, #484]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d00d      	beq.n	80050e0 <HAL_RCC_GetSysClockFreq+0x40>
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	f200 80e1 	bhi.w	800528c <HAL_RCC_GetSysClockFreq+0x1ec>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_RCC_GetSysClockFreq+0x34>
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d003      	beq.n	80050da <HAL_RCC_GetSysClockFreq+0x3a>
 80050d2:	e0db      	b.n	800528c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d4:	4b73      	ldr	r3, [pc, #460]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80050d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050d8:	e0db      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050da:	4b73      	ldr	r3, [pc, #460]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80050dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050de:	e0d8      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e0:	4b6f      	ldr	r3, [pc, #444]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ea:	4b6d      	ldr	r3, [pc, #436]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d063      	beq.n	80051be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050f6:	4b6a      	ldr	r3, [pc, #424]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	099b      	lsrs	r3, r3, #6
 80050fc:	2200      	movs	r2, #0
 80050fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005100:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005108:	633b      	str	r3, [r7, #48]	@ 0x30
 800510a:	2300      	movs	r3, #0
 800510c:	637b      	str	r3, [r7, #52]	@ 0x34
 800510e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005112:	4622      	mov	r2, r4
 8005114:	462b      	mov	r3, r5
 8005116:	f04f 0000 	mov.w	r0, #0
 800511a:	f04f 0100 	mov.w	r1, #0
 800511e:	0159      	lsls	r1, r3, #5
 8005120:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005124:	0150      	lsls	r0, r2, #5
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4621      	mov	r1, r4
 800512c:	1a51      	subs	r1, r2, r1
 800512e:	6139      	str	r1, [r7, #16]
 8005130:	4629      	mov	r1, r5
 8005132:	eb63 0301 	sbc.w	r3, r3, r1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005144:	4659      	mov	r1, fp
 8005146:	018b      	lsls	r3, r1, #6
 8005148:	4651      	mov	r1, sl
 800514a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800514e:	4651      	mov	r1, sl
 8005150:	018a      	lsls	r2, r1, #6
 8005152:	4651      	mov	r1, sl
 8005154:	ebb2 0801 	subs.w	r8, r2, r1
 8005158:	4659      	mov	r1, fp
 800515a:	eb63 0901 	sbc.w	r9, r3, r1
 800515e:	f04f 0200 	mov.w	r2, #0
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800516a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800516e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005172:	4690      	mov	r8, r2
 8005174:	4699      	mov	r9, r3
 8005176:	4623      	mov	r3, r4
 8005178:	eb18 0303 	adds.w	r3, r8, r3
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	462b      	mov	r3, r5
 8005180:	eb49 0303 	adc.w	r3, r9, r3
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005192:	4629      	mov	r1, r5
 8005194:	024b      	lsls	r3, r1, #9
 8005196:	4621      	mov	r1, r4
 8005198:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800519c:	4621      	mov	r1, r4
 800519e:	024a      	lsls	r2, r1, #9
 80051a0:	4610      	mov	r0, r2
 80051a2:	4619      	mov	r1, r3
 80051a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a6:	2200      	movs	r2, #0
 80051a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051b0:	f7fb f81c 	bl	80001ec <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4613      	mov	r3, r2
 80051ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051bc:	e058      	b.n	8005270 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051be:	4b38      	ldr	r3, [pc, #224]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	099b      	lsrs	r3, r3, #6
 80051c4:	2200      	movs	r2, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	4611      	mov	r1, r2
 80051ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	2300      	movs	r3, #0
 80051d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051d8:	4642      	mov	r2, r8
 80051da:	464b      	mov	r3, r9
 80051dc:	f04f 0000 	mov.w	r0, #0
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	0159      	lsls	r1, r3, #5
 80051e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ea:	0150      	lsls	r0, r2, #5
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4641      	mov	r1, r8
 80051f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80051f6:	4649      	mov	r1, r9
 80051f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80051fc:	f04f 0200 	mov.w	r2, #0
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005208:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800520c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005210:	ebb2 040a 	subs.w	r4, r2, sl
 8005214:	eb63 050b 	sbc.w	r5, r3, fp
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	00eb      	lsls	r3, r5, #3
 8005222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005226:	00e2      	lsls	r2, r4, #3
 8005228:	4614      	mov	r4, r2
 800522a:	461d      	mov	r5, r3
 800522c:	4643      	mov	r3, r8
 800522e:	18e3      	adds	r3, r4, r3
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	464b      	mov	r3, r9
 8005234:	eb45 0303 	adc.w	r3, r5, r3
 8005238:	607b      	str	r3, [r7, #4]
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005246:	4629      	mov	r1, r5
 8005248:	028b      	lsls	r3, r1, #10
 800524a:	4621      	mov	r1, r4
 800524c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005250:	4621      	mov	r1, r4
 8005252:	028a      	lsls	r2, r1, #10
 8005254:	4610      	mov	r0, r2
 8005256:	4619      	mov	r1, r3
 8005258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800525a:	2200      	movs	r2, #0
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	61fa      	str	r2, [r7, #28]
 8005260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005264:	f7fa ffc2 	bl	80001ec <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4613      	mov	r3, r2
 800526e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005270:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	0c1b      	lsrs	r3, r3, #16
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	3301      	adds	r3, #1
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005280:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800528a:	e002      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800528c:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800528e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005294:	4618      	mov	r0, r3
 8005296:	3750      	adds	r7, #80	@ 0x50
 8005298:	46bd      	mov	sp, r7
 800529a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800529e:	bf00      	nop
 80052a0:	40023800 	.word	0x40023800
 80052a4:	00f42400 	.word	0x00f42400
 80052a8:	007a1200 	.word	0x007a1200

080052ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b0:	4b03      	ldr	r3, [pc, #12]	@ (80052c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000018 	.word	0x20000018

080052c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052c8:	f7ff fff0 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052cc:	4602      	mov	r2, r0
 80052ce:	4b05      	ldr	r3, [pc, #20]	@ (80052e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	0a9b      	lsrs	r3, r3, #10
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	4903      	ldr	r1, [pc, #12]	@ (80052e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052da:	5ccb      	ldrb	r3, [r1, r3]
 80052dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40023800 	.word	0x40023800
 80052e8:	08007a58 	.word	0x08007a58

080052ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800531c:	2b00      	cmp	r3, #0
 800531e:	d075      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005320:	4b91      	ldr	r3, [pc, #580]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005326:	f7fd fc4d 	bl	8002bc4 <HAL_GetTick>
 800532a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800532c:	e008      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800532e:	f7fd fc49 	bl	8002bc4 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e189      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005340:	4b8a      	ldr	r3, [pc, #552]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f0      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d009      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	019a      	lsls	r2, r3, #6
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	071b      	lsls	r3, r3, #28
 8005364:	4981      	ldr	r1, [pc, #516]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01f      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005378:	4b7c      	ldr	r3, [pc, #496]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800537e:	0f1b      	lsrs	r3, r3, #28
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	019a      	lsls	r2, r3, #6
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	061b      	lsls	r3, r3, #24
 8005392:	431a      	orrs	r2, r3
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	071b      	lsls	r3, r3, #28
 8005398:	4974      	ldr	r1, [pc, #464]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800539a:	4313      	orrs	r3, r2
 800539c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053a0:	4b72      	ldr	r3, [pc, #456]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80053a6:	f023 021f 	bic.w	r2, r3, #31
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	496e      	ldr	r1, [pc, #440]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	019a      	lsls	r2, r3, #6
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	061b      	lsls	r3, r3, #24
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	071b      	lsls	r3, r3, #28
 80053d8:	4964      	ldr	r1, [pc, #400]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053e0:	4b61      	ldr	r3, [pc, #388]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053e6:	f7fd fbed 	bl	8002bc4 <HAL_GetTick>
 80053ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053ec:	e008      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053ee:	f7fd fbe9 	bl	8002bc4 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e129      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005400:	4b5a      	ldr	r3, [pc, #360]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005420:	2b00      	cmp	r3, #0
 8005422:	d079      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005424:	4b52      	ldr	r3, [pc, #328]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800542a:	f7fd fbcb 	bl	8002bc4 <HAL_GetTick>
 800542e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005430:	e008      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005432:	f7fd fbc7 	bl	8002bc4 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e107      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005444:	4b49      	ldr	r3, [pc, #292]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800544c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005450:	d0ef      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d020      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800545e:	4b43      	ldr	r3, [pc, #268]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005464:	0f1b      	lsrs	r3, r3, #28
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	019a      	lsls	r2, r3, #6
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	061b      	lsls	r3, r3, #24
 8005478:	431a      	orrs	r2, r3
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	071b      	lsls	r3, r3, #28
 800547e:	493b      	ldr	r1, [pc, #236]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005486:	4b39      	ldr	r3, [pc, #228]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800548c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	3b01      	subs	r3, #1
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	4934      	ldr	r1, [pc, #208]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01e      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054ac:	4b2f      	ldr	r3, [pc, #188]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b2:	0e1b      	lsrs	r3, r3, #24
 80054b4:	f003 030f 	and.w	r3, r3, #15
 80054b8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	019a      	lsls	r2, r3, #6
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	061b      	lsls	r3, r3, #24
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	071b      	lsls	r3, r3, #28
 80054cc:	4927      	ldr	r1, [pc, #156]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054d4:	4b25      	ldr	r3, [pc, #148]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054da:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e2:	4922      	ldr	r1, [pc, #136]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054ea:	4b21      	ldr	r3, [pc, #132]	@ (8005570 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054f0:	f7fd fb68 	bl	8002bc4 <HAL_GetTick>
 80054f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054f8:	f7fd fb64 	bl	8002bc4 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e0a4      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800550a:	4b18      	ldr	r3, [pc, #96]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005512:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005516:	d1ef      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 808b 	beq.w	800563c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	4b10      	ldr	r3, [pc, #64]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	4a0f      	ldr	r2, [pc, #60]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005534:	6413      	str	r3, [r2, #64]	@ 0x40
 8005536:	4b0d      	ldr	r3, [pc, #52]	@ (800556c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005542:	4b0c      	ldr	r3, [pc, #48]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a0b      	ldr	r2, [pc, #44]	@ (8005574 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800554c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800554e:	f7fd fb39 	bl	8002bc4 <HAL_GetTick>
 8005552:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005554:	e010      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005556:	f7fd fb35 	bl	8002bc4 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d909      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e075      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005568:	42470068 	.word	0x42470068
 800556c:	40023800 	.word	0x40023800
 8005570:	42470070 	.word	0x42470070
 8005574:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005578:	4b38      	ldr	r3, [pc, #224]	@ (800565c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0e8      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005584:	4b36      	ldr	r3, [pc, #216]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005588:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800558c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d02f      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005598:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d028      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055b2:	4b2c      	ldr	r3, [pc, #176]	@ (8005664 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055b8:	4a29      	ldr	r2, [pc, #164]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055be:	4b28      	ldr	r3, [pc, #160]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d114      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055ca:	f7fd fafb 	bl	8002bc4 <HAL_GetTick>
 80055ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d0:	e00a      	b.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d2:	f7fd faf7 	bl	8002bc4 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e035      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0ee      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005600:	d10d      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005602:	4b17      	ldr	r3, [pc, #92]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005616:	4912      	ldr	r1, [pc, #72]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005618:	4313      	orrs	r3, r2
 800561a:	608b      	str	r3, [r1, #8]
 800561c:	e005      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800561e:	4b10      	ldr	r3, [pc, #64]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	4a0f      	ldr	r2, [pc, #60]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005624:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005628:	6093      	str	r3, [r2, #8]
 800562a:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800562c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005636:	490a      	ldr	r1, [pc, #40]	@ (8005660 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005638:	4313      	orrs	r3, r2
 800563a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d004      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800564e:	4b06      	ldr	r3, [pc, #24]	@ (8005668 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005650:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40007000 	.word	0x40007000
 8005660:	40023800 	.word	0x40023800
 8005664:	42470e40 	.word	0x42470e40
 8005668:	424711e0 	.word	0x424711e0

0800566c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e01c      	b.n	80056b8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	795b      	ldrb	r3, [r3, #5]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d105      	bne.n	8005694 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fc fdee 	bl	8002270 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0204 	orr.w	r2, r2, #4
 80056a8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	791b      	ldrb	r3, [r3, #4]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_RNG_GenerateRandomNumber+0x1a>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e044      	b.n	8005764 <HAL_RNG_GenerateRandomNumber+0xa4>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	795b      	ldrb	r3, [r3, #5]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d133      	bne.n	8005752 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2202      	movs	r2, #2
 80056ee:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056f0:	f7fd fa68 	bl	8002bc4 <HAL_GetTick>
 80056f4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80056f6:	e018      	b.n	800572a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80056f8:	f7fd fa64 	bl	8002bc4 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d911      	bls.n	800572a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b01      	cmp	r3, #1
 8005712:	d00a      	beq.n	800572a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e01c      	b.n	8005764 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d1df      	bne.n	80056f8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68da      	ldr	r2, [r3, #12]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	715a      	strb	r2, [r3, #5]
 8005750:	e004      	b.n	800575c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2204      	movs	r2, #4
 8005756:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	711a      	strb	r2, [r3, #4]

  return status;
 8005762:	7bfb      	ldrb	r3, [r7, #15]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e07b      	b.n	8005876 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	d108      	bne.n	8005798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800578e:	d009      	beq.n	80057a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	61da      	str	r2, [r3, #28]
 8005796:	e005      	b.n	80057a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fc fd78 	bl	80022b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005814:	431a      	orrs	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005828:	ea42 0103 	orr.w	r1, r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005830:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	0c1b      	lsrs	r3, r3, #16
 8005842:	f003 0104 	and.w	r1, r3, #4
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584a:	f003 0210 	and.w	r2, r3, #16
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005864:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b082      	sub	sp, #8
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e01a      	b.n	80058c6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058a6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7fc fd4b 	bl	8002344 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b088      	sub	sp, #32
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058de:	f7fd f971 	bl	8002bc4 <HAL_GetTick>
 80058e2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d001      	beq.n	80058f8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80058f4:	2302      	movs	r3, #2
 80058f6:	e12a      	b.n	8005b4e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <HAL_SPI_Transmit+0x36>
 80058fe:	88fb      	ldrh	r3, [r7, #6]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e122      	b.n	8005b4e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <HAL_SPI_Transmit+0x48>
 8005912:	2302      	movs	r3, #2
 8005914:	e11b      	b.n	8005b4e <HAL_SPI_Transmit+0x280>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2203      	movs	r2, #3
 8005922:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	88fa      	ldrh	r2, [r7, #6]
 8005936:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	88fa      	ldrh	r2, [r7, #6]
 800593c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005964:	d10f      	bne.n	8005986 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005974:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005984:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005990:	2b40      	cmp	r3, #64	@ 0x40
 8005992:	d007      	beq.n	80059a4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059ac:	d152      	bne.n	8005a54 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <HAL_SPI_Transmit+0xee>
 80059b6:	8b7b      	ldrh	r3, [r7, #26]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d145      	bne.n	8005a48 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c0:	881a      	ldrh	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059cc:	1c9a      	adds	r2, r3, #2
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059e0:	e032      	b.n	8005a48 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d112      	bne.n	8005a16 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f4:	881a      	ldrh	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a00:	1c9a      	adds	r2, r3, #2
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a14:	e018      	b.n	8005a48 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a16:	f7fd f8d5 	bl	8002bc4 <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d803      	bhi.n	8005a2e <HAL_SPI_Transmit+0x160>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a2c:	d102      	bne.n	8005a34 <HAL_SPI_Transmit+0x166>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d109      	bne.n	8005a48 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e082      	b.n	8005b4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1c7      	bne.n	80059e2 <HAL_SPI_Transmit+0x114>
 8005a52:	e053      	b.n	8005afc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_SPI_Transmit+0x194>
 8005a5c:	8b7b      	ldrh	r3, [r7, #26]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d147      	bne.n	8005af2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
 8005a6c:	7812      	ldrb	r2, [r2, #0]
 8005a6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a88:	e033      	b.n	8005af2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d113      	bne.n	8005ac0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	330c      	adds	r3, #12
 8005aa2:	7812      	ldrb	r2, [r2, #0]
 8005aa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005abe:	e018      	b.n	8005af2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ac0:	f7fd f880 	bl	8002bc4 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d803      	bhi.n	8005ad8 <HAL_SPI_Transmit+0x20a>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ad6:	d102      	bne.n	8005ade <HAL_SPI_Transmit+0x210>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e02d      	b.n	8005b4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1c6      	bne.n	8005a8a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f8bf 	bl	8005c84 <SPI_EndRxTxTransaction>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e000      	b.n	8005b4e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
  }
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b64:	b2db      	uxtb	r3, r3
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
	...

08005b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b84:	f7fd f81e 	bl	8002bc4 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8c:	1a9b      	subs	r3, r3, r2
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	4413      	add	r3, r2
 8005b92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b94:	f7fd f816 	bl	8002bc4 <HAL_GetTick>
 8005b98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b9a:	4b39      	ldr	r3, [pc, #228]	@ (8005c80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	015b      	lsls	r3, r3, #5
 8005ba0:	0d1b      	lsrs	r3, r3, #20
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	fb02 f303 	mul.w	r3, r2, r3
 8005ba8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005baa:	e054      	b.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bb2:	d050      	beq.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bb4:	f7fd f806 	bl	8002bc4 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d902      	bls.n	8005bca <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d13d      	bne.n	8005c46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005be2:	d111      	bne.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bec:	d004      	beq.n	8005bf8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bf6:	d107      	bne.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c10:	d10f      	bne.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e017      	b.n	8005c76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	bf0c      	ite	eq
 8005c66:	2301      	moveq	r3, #1
 8005c68:	2300      	movne	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d19b      	bne.n	8005bac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3720      	adds	r7, #32
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20000018 	.word	0x20000018

08005c84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2201      	movs	r2, #1
 8005c98:	2102      	movs	r1, #2
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f7ff ff6a 	bl	8005b74 <SPI_WaitFlagStateUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e032      	b.n	8005d1c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <SPI_EndRxTxTransaction+0xa0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1b      	ldr	r2, [pc, #108]	@ (8005d28 <SPI_EndRxTxTransaction+0xa4>)
 8005cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc0:	0d5b      	lsrs	r3, r3, #21
 8005cc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
 8005cca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cd4:	d112      	bne.n	8005cfc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2180      	movs	r1, #128	@ 0x80
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff ff47 	bl	8005b74 <SPI_WaitFlagStateUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d016      	beq.n	8005d1a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf0:	f043 0220 	orr.w	r2, r3, #32
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e00f      	b.n	8005d1c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d12:	2b80      	cmp	r3, #128	@ 0x80
 8005d14:	d0f2      	beq.n	8005cfc <SPI_EndRxTxTransaction+0x78>
 8005d16:	e000      	b.n	8005d1a <SPI_EndRxTxTransaction+0x96>
        break;
 8005d18:	bf00      	nop
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	20000018 	.word	0x20000018
 8005d28:	165e9f81 	.word	0x165e9f81

08005d2c <memset>:
 8005d2c:	4402      	add	r2, r0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d100      	bne.n	8005d36 <memset+0xa>
 8005d34:	4770      	bx	lr
 8005d36:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3a:	e7f9      	b.n	8005d30 <memset+0x4>

08005d3c <__libc_init_array>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005d74 <__libc_init_array+0x38>)
 8005d40:	4c0d      	ldr	r4, [pc, #52]	@ (8005d78 <__libc_init_array+0x3c>)
 8005d42:	1b64      	subs	r4, r4, r5
 8005d44:	10a4      	asrs	r4, r4, #2
 8005d46:	2600      	movs	r6, #0
 8005d48:	42a6      	cmp	r6, r4
 8005d4a:	d109      	bne.n	8005d60 <__libc_init_array+0x24>
 8005d4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005d7c <__libc_init_array+0x40>)
 8005d4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005d80 <__libc_init_array+0x44>)
 8005d50:	f000 f826 	bl	8005da0 <_init>
 8005d54:	1b64      	subs	r4, r4, r5
 8005d56:	10a4      	asrs	r4, r4, #2
 8005d58:	2600      	movs	r6, #0
 8005d5a:	42a6      	cmp	r6, r4
 8005d5c:	d105      	bne.n	8005d6a <__libc_init_array+0x2e>
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d64:	4798      	blx	r3
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7ee      	b.n	8005d48 <__libc_init_array+0xc>
 8005d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6e:	4798      	blx	r3
 8005d70:	3601      	adds	r6, #1
 8005d72:	e7f2      	b.n	8005d5a <__libc_init_array+0x1e>
 8005d74:	08007a68 	.word	0x08007a68
 8005d78:	08007a68 	.word	0x08007a68
 8005d7c:	08007a68 	.word	0x08007a68
 8005d80:	08007a6c 	.word	0x08007a6c

08005d84 <memcpy>:
 8005d84:	440a      	add	r2, r1
 8005d86:	4291      	cmp	r1, r2
 8005d88:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005d8c:	d100      	bne.n	8005d90 <memcpy+0xc>
 8005d8e:	4770      	bx	lr
 8005d90:	b510      	push	{r4, lr}
 8005d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d9a:	4291      	cmp	r1, r2
 8005d9c:	d1f9      	bne.n	8005d92 <memcpy+0xe>
 8005d9e:	bd10      	pop	{r4, pc}

08005da0 <_init>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	bf00      	nop
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr

08005dac <_fini>:
 8005dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dae:	bf00      	nop
 8005db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005db2:	bc08      	pop	{r3}
 8005db4:	469e      	mov	lr, r3
 8005db6:	4770      	bx	lr
